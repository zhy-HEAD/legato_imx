/** @page basicBuildMake Configure the Application Framework

Now that you have the Legato Application Framework and a @ref basicBuildToolchian "toolchain"
installed on your development machine, you can now configure the Framework for your specific target.
Running the @c make script for your target sets up the target management tools, builds a default
update for your target and sets up environment variables for your target.  Each time you upgrade
Legato, or switch target devices you need to run the make scripts again to set up the environment
specific for your target.

@section basicBuildMake_makeTarget Configure Application Framework for a Target

All supported platforms use the @c make tool and have pre-configured makefiles included in the
Framework.

The framework build and configuration may be modified using @ref kconfigDescription "KConfig" to
select configuration options.

@warning You must have the matching @ref buildToolchain "toolchain installed" for your target.

Run @c make @c <target> to build the framework for the target from your Legato Root Directory:
@verbatim
$ make wp85  # makes an update file for a WP85 series device
@endverbatim

List of Supported Platforms (see your module vendor for information and the toolchain required to
build)

@todo Add links to "Support Platform" info once that is built on Legato.io and add in virt

| Target               | Description                                                                                                                    |
|----------------------|--------------------------------------------------------------------------------------------------------------------------------|
| localhost            | Test build process, very limited functionality                                                                                 |
| raspi                | [Raspberry Pi running Raspbian](https://www.raspbian.org/)                                                                     |
| wp85                 | [Sierra Wireless WP85xx modules](https://source.sierrawireless.com/devices/wp-series/wp8548/)                                  |
| wp77xx               | [Sierra Wireless WP77xx modules](https://source.sierrawireless.com/)                                                           |
| wp76xx               | [Sierra Wireless WP76xx modules](https://source.sierrawireless.com/devices/wp-series/wp7601/)                                  |
| wp750x               | [Sierra Wireless WP750x modules](https://source.sierrawireless.com/devices/wp-series/wp7502/)                                  |
| ar86                 | [Sierra Wireless AR86xx modules](https://www.sierrawireless.com/products-and-solutions/embedded-solutions/automotive-modules/) |
| ar759x               | [Sierra Wireless AR759x modules](https://www.sierrawireless.com/products-and-solutions/embedded-solutions/automotive-modules/) |
| ar758x               | [Sierra Wireless AR758x modules](https://www.sierrawireless.com/products-and-solutions/embedded-solutions/automotive-modules/) |
| ar7                  | [Sierra Wireless AR7xxx modules](https://www.sierrawireless.com/products-and-solutions/embedded-solutions/automotive-modules/) |

Running make will:
- build an update pack for your target with the version of the Legato Application Framework that is
  installed on your dev machine.
- build tools needed to build apps and configure your target.
- set-up environment variables and other useful configuration to make using the Framework easier.

Once the make scripts have run you should now see the following directories @c /bin and @c /build.
The @c bin directory contains tools and scripts for the framework and the @c build directory
contains all the build files and install files to update your target.

@section basicBuildMake_ConfigureShell Configure Shell

You will need to configure your shell so you can easily use the @ref tools included with Legato
Application Framework.

@c cd into the legato root directory (e.g.; @c ~/legato-repo/legato) and run the script
@c ./bin/legs or <c>source bin/configlegatoenv</c>. @c legs (legato shell) will open up a new shell
and configure the Legato environment variables such as setting $LEGATO_ROOT and adding it to your
path. Sourcing @c configlegatoenv will do the same thing but will configure your current shell,
preserving your history.

For the list of tools and further instructions on configuring your shell see @ref tools .

@verbatim
$ ./bin/legs
@endverbatim

OR

@verbatim
$ source bin/configlegatoenv
@endverbatim

@note You can also add bin/configlegatoenv to your bash profile so that the environment variables
will automatically be configured each time you log into your Dev Machine.

@section basicBuildMake_UpdateTarget Update Target

The Legato Runtime Environment included on your target may not be at the same version that is
installed on your dev machine.  Please check what version(s) are compatible with your target before
updating.  Now that you've run @c make for your target you will have an initial "default" build of
Runtime Environment that you can now update your target with.  The update file will be located in
the @c build/<target> directory and will be named @c system.<target>.update.

To @ref toolsHost_update the runtime environment on your target use the
@ref toolsHost_update tool to pass the system update pack to the target device for installation. I

@verbatim
$ update build/wp85/system.wp85.update 192.168.2.2
@endverbatim

OR

@verbatim
$ update build/raspi/system.raspi.update <target IP>
@endverbatim

@section basicBuildLegato_StartProject Start Project

Now you are ready to start your first project, we suggest starting with our
@ref basicApps "helloWorld tutorial" and then work your way through @ref basicAppsIPC "helloIPC"
before starting coding your own projects.  The hello tutorials introduce you to some of the
@ref concepts "methodologies and concepts" of how build apps and systems for your target.

In your workspace directory create a folder for your project.

@verbatim
$ mkdir <projectName>
$ cd <projectName>
@endverbatim

Each project will probabbly contain apps, components and

@note It is recommended to do all of your work within project directories, while the Application
Framework is open source and you are able to customize most parts within it, your project directory
should contain all your apps, components and systems that you have created/customized.  This ensures
that future upgrades will not overwrite any of the work that you have done.

Copyright (C) Sierra Wireless Inc.

**/
