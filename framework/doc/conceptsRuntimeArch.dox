/** @page conceptsRuntimeArch Runtime Architecture

Legato's runtime architecture manages each app in its own sandbox.

@image html conceptsRuntimeArch_LayeredArchitecture.png

Apps communicate with each other using access-controlled message-passing
services.

The Supervisor automatically creates sandboxes.

@section conceptsRuntimeArch_apps Applications

An application (we call them 'apps') is a collection of executable files, libraries, and/or other
resource files (e.g., audio files, web pages) that can be deployed to a target device.
Once installed on a device, an app can be started and stopped.

By default, each app runs in its own sandbox. When an app is constructed, all
the files and IPC services it needs to access are declared.  At runtime, the Supervisor and
the Service Directory enforce that only approved files and IPC services are accessed by that app.

@ref getStartedApps

@section conceptsRuntimeArch_supervisor Supervisor

The Supervisor is a privileged process running on the target device that:
 - creates and destroys @ref conceptsSecuritySandbox for apps
 - starts and stops apps
 - performs fault recovery when apps fail (e.g., restarting the app).

@section conceptsRuntimeArch_serviceDirectory Service Directory

Legato's Service Directory provides a secure way for client processes to find servers offering
services they need, which ensures only authorized connections are established.

@ref legatoServices <br>
@ref conceptsInterfaces

@section conceptsRuntimeArch_configTree Config Tree

The Config Tree provides persistent @ref basicConfig data
storage organized in a tree structure.

Command line @ref toolsTarget_config tool <br>
@ref c_config

@section conceptsRuntimeArch_watchdog Watchdog

Legato provides a monitoring service for applications with the @c watchdog daemon which runs within
the Legato Runtime Environment.  If your target supports it, the watchdog daemon can also be enabled
to kick an external watchdog such as Linux watchdog device.

@note To configure the external watchdog kick interval, add a @ref defFilesSdef_externalWatchdogKick
section to your systems @ref defFilesSdef .

The daemon monitors app's processes for hangs or freezing and if the process doesn't
"kick" the watchdog daemon in a specified time (the default is @b 30 @b seconds), the watchdog
signals the @ref conceptsRuntimeArch_supervisor to perform a specified action.  Critical services
should also set the maxWatchdogTimeout to further ensure that the system is running with all
critical services started.

@note Most platform services installed on your target have a maxWatchdogTimeout set to 2 minutes. To
enable, configure or disable watchdog on a platform service, configure the watchdog settings in the
platform service's @ref defFilesAdef.

The watchdog consists of 3 configurable settings:
 - timeout: the time the watchdog daemon waits for a "kick" in normal operation.
 - maxTimeout: the maximum time the watchdog daemon waits for a kick (including on startup,
   when performing a system recovery, and after le_wdog_Timeout()).
 - action: the action the watchdog daemon takes when it does not receive a "kick".

 All settings are configured in the @ref defFilesAdef "app's definition file (.adef)". You must also
bind the watchdog API into your app and use the @ref c_wdog API's functions to configure the
behavior of the watchdog and the app.

@note Setting the maxTimeout also ensures the watchdog is started on system boot (rather than the
first instance of @c le_wdog_Kick()).

Default watchdog kick timeout: @b 30 @b seconds

Default watchdog action: @b restart

Possible watchdog actions:
 - @c ignore - Supervisor just logs a warning message; no further action taken.
 - @c restart - log a critical message and restart the process.
 - @c restartApp - log a critical message and restart the entire app.
 - @c stop - Supervisor terminates the process if it's still running.
 - @c stopApp - log a critical message and terminate the entire app (send all processes
   the SIGTERM signal, followed shortly by SIGKILL).
 - @c reboot - log an emergency message and reboot the system.

To disable the watchdog for all the daemons within the Legato Application Framework, disable the
@ref WDOG_FRAMEWORK setting in the Legato KConfig.

To disable the watchdog for the Platform Services on your target disable the @ref SERVICES_WATCHDOG
setting in the legato KConfig.

@section conceptsRuntimeArch_logs Logs

Legato provides a user-friendly way to control log message filtering for running app processes.

Command line @ref toolsTarget_log tool <br>
@ref c_logging.

@section conceptsRuntimeArch_updateDaemon Update Daemon

The Update Daemon accepts @e update @e pack files that contain software/firmware update
instructions and associated data like libraries, executables, and resource files.

Update packs can be fed to the Update Daemon through the @ref c_update API or
through the @ref toolsTarget_update tool.

The Update Daemon includes hooks that allow update packs to be digitally signed and/or encrypted
for security reasons.

Copyright (C) Sierra Wireless Inc.

**/
