#!/bin/bash
# --------------------------------------------------------------------------------------------------
# Ninja build script generator for the libdefTools.so and mk tools.
#
# Copyright (C) Sierra Wireless Inc.
# --------------------------------------------------------------------------------------------------

# Ensure all the required variables are set.
if [ -z "$LEGATO_ROOT" ]
then
    echo "**ERROR: LEGATO_ROOT is not set." 1>&2
    exit 1
fi
if [ -z "$BUILD_DIR" ]
then
    echo "**ERROR: BUILD_DIR is not set." 1>&2
    exit 1
fi
if [ -z "$CXX" ]
then
    echo "**ERROR: CXX not set" >&2
    exit 1
fi
if [ -z "$TOOLS_ARCH" ]
then
    echo "**ERROR: TOOLS_ARCH not set." >&2
    exit 1
fi
if [ -z "$HOST_ARCH" ]
then
    echo "**ERROR: HOST_ARCH not set." >&2
    exit 1
fi

SOURCE_DIR=$LEGATO_ROOT/framework/tools
NINJA_SCRIPT=$BUILD_DIR/build.ninja
NINJA_SCRIPT_GENERATOR=$PWD/$0

# Turn a list of source file paths into a list of paths to the object (.o) files that they will
# be compiled into.
function ObjectsFromSources()
{
    for sourceFile in $*
    do
        printf "%s.o " `echo "$sourceFile" | sed "s#$SOURCE_DIR#$BUILD_DIR/obj#"`
    done
}

# Select the C++ standard option for the compiler.
COMPILER="$CXX -std=c++0x"

# Use ccache.
if [[ "$LE_CONFIG_USE_CCACHE" == "y" ]]
then
    if [ -z "${CCACHE}" ]
    then
        echo "Unable to find ccache while it is enabled."
        exit 1
    fi

    COMPILER="${CCACHE} ${COMPILER}"
fi

# Support a 64-bit host cross-building tools for a 32-bit x86.
echo "Tools arch: $TOOLS_ARCH"
TOOLS_ARCH_FLAGS=""
if [[ "$TOOLS_ARCH" != "$HOST_ARCH" ]]
then
    if [[ "$TOOLS_ARCH" == "i686" ]]
    then
        TOOLS_ARCH_FLAGS="-m32"
    else
        echo "Unable to build tools for ${TOOLS_ARCH} from host ${HOST_ARCH}"
        exit 1
    fi
fi

# Get a list of all the .cpp files.
DEFTOOLS_SOURCES=$(find $SOURCE_DIR/defTools -name '*.cpp' |tr '\n' ' ')
MKTOOLS_SOURCES=$(find $SOURCE_DIR/mkTools -name '*.cpp' |tr '\n' ' ')

# Compute a list of all the .o files.
DEFTOOLS_OBJECTS=$(ObjectsFromSources $DEFTOOLS_SOURCES)
MKTOOLS_OBJECTS=$(ObjectsFromSources $MKTOOLS_SOURCES)

HOST_CFLAGS="-Wall -Werror -Wno-unused-command-line-argument -Wno-deprecated"

cat > $NINJA_SCRIPT <<EOF
# Build script for the libdefTools.so and mkTools.

# == Auto-generated file.  DO NOT EDIT. ==
# == Generated by $0 ==

builddir = $BUILD_DIR

rule Link
  description = Linking tool
  command = $COMPILER $TOOLS_ARCH_FLAGS \$ldflags -g -o \$out \$in \$libs

rule Compile
  description = Compiling tool source
  depfile = \$out.d
  command = $COMPILER -MMD -MF \$out.d $TOOLS_ARCH_FLAGS \$
                      -g \$
                      $HOST_CFLAGS \$
                      -I\$builddir/precompiled/ \$
                      \$cflags \$
                      -I$LEGATO_ROOT/framework/liblegato \$
                      -c \$in \$
                      -o \$out

rule PreCompile
  description = Generating pre-compiled header
  depfile = \$out.d
  command = $COMPILER -MMD -MF \$out.d $TOOLS_ARCH_FLAGS \$
                      $HOST_CFLAGS \$
                      -g \$
                      -o \$out \$in

rule GetMessages
  description = Extracting messages
  command = xgettext -d "mkTools" -L C++ -kLE_I18N --flag=LE_I18N:1:pass-c-format --boost \$
                     --force-po --copyright-holder="Sierra Wireless Inc." \$
                     --package-name="mkTools" -o \$out \$in

build \$builddir/bin/mk : Link $MKTOOLS_OBJECTS | \$builddir/lib/libdefTools.so
  ldflags = -L\$builddir/lib -Wl,-rpath='\$\$ORIGIN/../lib' -Wl,--enable-new-dtags
  libs = -ldefTools

build \$builddir/lib/libdefTools.so : Link $DEFTOOLS_OBJECTS
  ldflags = -shared

build \$builddir/precompiled/mkTools.h.gch : PreCompile $SOURCE_DIR/mkTools/mkTools.h

build \$builddir/precompiled/defTools.h.gch : PreCompile $SOURCE_DIR/defTools/defTools.h

rule RegenNinjaScript
  description = Regenerating build script.
  generator = 1
  command = export LEGATO_ROOT="$LEGATO_ROOT" && \$
            $NINJA_SCRIPT_GENERATOR

build $NINJA_SCRIPT : RegenNinjaScript | $NINJA_SCRIPT_GENERATOR

build \$builddir/mkTools.po : GetMessages $MKTOOLS_SOURCES $DEFTOOLS_SOURCES

build messages : phony \$builddir/mkTools.po

default \$builddir/bin/mk

EOF

# Add build statements for all the .o files.
for sourceFile in $DEFTOOLS_SOURCES
do
    echo "build `ObjectsFromSources $sourceFile` : Compile $sourceFile | \
$SOURCE_DIR/defTools/defTools.h"
    echo "    cflags = -fpic -I$SOURCE_DIR/defTools"
    echo

done >> $NINJA_SCRIPT

for sourceFile in $MKTOOLS_SOURCES
do
    echo "build `ObjectsFromSources $sourceFile` : Compile $sourceFile | \
$SOURCE_DIR/mkTools/mkTools.h"
    echo "    cflags = -I$SOURCE_DIR/defTools -I$SOURCE_DIR/mkTools"
    echo

done >> $NINJA_SCRIPT

