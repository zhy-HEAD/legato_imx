#!/bin/bash
# Copyright (C) Sierra Wireless Inc.

# run every executable file in scripts with option -h except legs and this file
# redirect help output to a page in docs
# finally build root page

DOC_DIR="$LEGATO_ROOT/framework/doc"
HOST_TOOL_DOC="$DOC_DIR"/toolsHost
TOOLS_DIR="$LEGATO_ROOT/framework/tools/scripts"
TOOL_NAMES=()
export MARKUP_HELP_DOX="LEGATO_AUTO_DOX"

OUTPUT_DIR=${1:-$DOC_DIR}
MAIN_PAGE="${OUTPUT_DIR}/toolsHost.dox"

echo "Building docs in $OUTPUT_DIR"

mkdir -p $OUTPUT_DIR

for file in $(find -L $TOOLS_DIR -type f -executable | sort); do
    if [[ $file = *legs ]]; then
        echo "Skipping - $file"
    elif [[ $file = *findtoolchain ]]; then
        # update-pack is not a user run tool. It will become a part of build.
        echo "Skipping - $file"
    elif [[ $file = *mkinfo ]]; then
        # mkinfo is not a user run tool. It will become a part of build.
        echo "Skipping - $file"
    elif [[ $file = *cextgenerator.py ]]; then
        # Python wrapper is for internal use
        echo "Skipping - $file"
    elif [[ $(basename "$file") = $(basename $0) ]]; then
        echo "Skipping - $file"
    else
        TOOL=$(basename "$file")
        TOOL_NAMES[${#TOOL_NAMES[@]}]="$TOOL"
        DOC_FILE="${OUTPUT_DIR}/toolsHost_${TOOL}.dox"
        echo "/** @page toolsHost_$TOOL $TOOL" > "$DOC_FILE"
        helpText=$("$file" --help)
        if [[ "$helpText" =~ "<!--${MARKUP_HELP_DOX}-->" ]];
        then
            echo "$helpText" >> "$DOC_FILE"
        else
            echo "@verbatim" >> "$DOC_FILE"
            echo "$helpText" >> "$DOC_FILE"
            echo "@endverbatim" >> "$DOC_FILE"
        fi
        echo "**/" >> "$DOC_FILE"
    fi
done

# Use the template to create the host tool doc page
rm -f $MAIN_PAGE
while read line
do
    if [[ "$line" = GENERATED_DOCS* ]]; then
        for t in ${TOOL_NAMES[@]}; do
            echo "@subpage toolsHost_$t <br>" >> $MAIN_PAGE
        done
    else
        echo "$line" >> $MAIN_PAGE
    fi
done < "$HOST_TOOL_DOC".tmpl
