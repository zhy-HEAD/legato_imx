#!/bin/bash
# source this for functions only
# Copyright (C) Sierra Wireless Inc.

BIN_PATH="/legato/systems/current/bin"

# If SSH_PORT is defined add the port option to ssh
SSH_PORT="${SSH_PORT:=22}"
SSH_EXTRA_OPTS="-o ServerAliveInterval=5 -o ServerAliveCountMax=1 ${SSH_EXTRA_OPTS}"
SSH_OPTS="-p ${SSH_PORT} ${SSH_EXTRA_OPTS}"
# Because scp uses upper case 'p' for port option!
SCP_OPTS="-P ${SSH_PORT} ${SSH_EXTRA_OPTS}"

commandName="$(basename "$0")"

SetMarkup() {
    markedup="<!--${MARKUP_HELP_DOX}-->"
    bh="<h1>"
    eh="</h1>"
    br="<br>"
    bc="<code>"
    ec="</code>"
    verbatim="@verbatim"
    endverbatim="@endverbatim"
    bold_next_word="@b "
    copyright_footer="<hr>$copyright"
    lt_escape="\\"
}

UsageHasOptionalTargetIp() {
    for name in ${help_usage[@]}; do
        if [[ $name = "[TARGET_IP]" ]];then
            return 0
        fi
    done
    return 1
}

# We don't use options ergo don't implement options section yet
# help_options

PrintMan() {
echo "$markedup"
PrintNameSection
PrintSynopsisSection
PrintDescriptionSection
PrintEnvironmentSection
PrintNotesSection
echo "$copyright_footer"
}

PrintNameSection() {
cat << NAME_SECTION

${bh}NAME${eh}
    ${bold_next_word}$commandName - $help_short_desc

NAME_SECTION
}

PrintSynopsisSection() {
    if [[ $help_usage ]]; then
    echo "${bh}SYNOPSIS${eh}"
        for usage_line in "${help_usage[@]}"; do
            printf "    ${bc}$commandName %s${ec}${br}\\n" "$usage_line"
        done
    echo ""
    fi
}

PrintDescriptionSection() {
    if [[ $help_long_description ]]; then
        echo "${bh}DESCRIPTION${eh}"
        echo "$verbatim"
        for desc_line in "${help_long_description[@]}"; do
            printf "    %s\\n" "$desc_line"
        done \
            | sed 's^\@^\\@^g' \
            | sed "s^<^${lt_escape}<^g"
        echo ""
        echo "$endverbatim"
    fi
}

PrintNotesSection() {
    if [[ $help_notes ]]; then
        echo "${bh}NOTES${eh}"
        echo "$verbatim"
        for desc_line in "${help_notes[@]}"; do
            printf "    %s\\n" "$desc_line"
        done \
            | sed 's^\@^\\@^g' \
            | sed 's^<^\\<^g'
        echo ""
        echo "$endverbatim"
    fi
}

PrintEnvironmentSection() {
#   currently we only use DEST_IP and we only care to tell the user
#    about it if TARGET_IP is optional
    if UsageHasOptionalTargetIp; then
        cat << ENVIRONMENT_SECTION
${bh}ENVIRONMENT${eh}

    If the TARGET_IP value is not given and the environment variable DEST_IP
    is set then DEST_IP will be used as TARGET_IP

ENVIRONMENT_SECTION
    fi
}

PrintAvailableUsage()
{
    if [ "$(type -t PrintUsage)" == "function" ];then
        PrintUsage
    else
        PrintMan
    fi
}

CheckForHelp()
{
    if [ "$1" = "-h" -o "$1" = "--help" -o "$1" = "help" ]
    then
        if [ -n "$MARKUP_HELP_DOX" ]
        then
            SetMarkup
        fi
        PrintAvailableUsage
        exit 0
    fi
    if [ "$1" = "--version" ]
    then
        cat "$LEGATO_ROOT/version"
        exit 0
    fi
}

ExitWithError()
{
    echo "***ERROR: $1" >&2
    shift
    while [ "$1" ]; do
        echo "$1" >&2
        shift
    done
    echo "Try '$commandName --help' for usage instructions." >&2
    exit 1
}

CheckRet()
{
    local retval=$?
    if [ $retval -ne 0 ]; then

        local message=${1:-"Exit code $retval"}
        ExitWithError "$message"
    fi
}

AddSshOpts()
{
    SSH_OPTS+=" $@"
    SCP_OPTS+=" $@"
}

# Set TARGET_IP based on either argument $1 or environment variable $DEST_IP
SetTargetIP()
{
    TARGET_IP=$1

    # Check if the argument is provided and can be pinged.
    if ! [ $TARGET_IP ]
    then
        if ! [ $DEST_IP ]
        then
            ExitWithError "A destination IP address was not provided, and environment variable DEST_IP is not set."
        fi

        TARGET_IP=$DEST_IP
    fi

    # Need to check for ipv6 - if this fails:
    #    check for link local address fe80:*
    #        if link local add interface (almost certainly %eth0 but check for interfaces)
    #        if ping6 works
    #            add -6 to SSH_OPTS
    if ! ping -c 1 -w 1 $TARGET_IP >/dev/null 2>&1
    then
        # if it is a link local address it needs to specify an interface
        if [[ ${TARGET_IP,,} =~ ^fe80: ]]; then
            index=0
            # check for "%interface" part
            if [[ "$TARGET_IP" =~ "%" ]]; then
            # it has an inteface part so just try it out
                TEST_IPS[0]=$TARGET_IP
            else # enumerate our interfaces and create an array of candidates
                for INTERFACE in $(ip link| awk '{print $2}' | grep eth); do
                    INTERFACE=${INTERFACE%":"}
                    TEST_IPS[$index]="$TARGET_IP%$INTERFACE"
                    index=$(($index + 1))
                done
            fi
        else # it's not link local. Try it as is.
            TEST_IPS[0]=$TARGET_IP
        fi

        for IP in ${TEST_IPS[@]}; do
            if ping6 -c 1 -w 1 $IP >/dev/null 2>&1; then
                TARGET_IP=$IP
                AddSshOpts -6
                return
            fi
        done

        ExitWithError "Device address $TARGET_IP seems to be unreachable."
    fi
}

# Function to be able to use the toolchain within a script
FindToolchain() {
    target_sanitized="$(echo ${TARGET} | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
    toolchain_dir_env_name=${target_sanitized^^}_TOOLCHAIN_DIR
    toolchain_prefix_env_name=${target_sanitized^^}_TOOLCHAIN_PREFIX

    findtoolchain_path="$LEGATO_ROOT/framework/tools/scripts/findtoolchain"

    TOOLCHAIN_DIR=${!toolchain_dir_env_name}
    if [ -z "$TOOLCHAIN_DIR" ]; then
        TOOLCHAIN_DIR=$($findtoolchain_path $TARGET dir)
    fi

    TOOLCHAIN_PREFIX=${!toolchain_prefix_env_name}
    if [ -z "$TOOLCHAIN_PREFIX" ]; then
        TOOLCHAIN_PREFIX=$($findtoolchain_path $TARGET prefix)
    fi

    if [ -z "$LEGATO_SYSROOT" ]; then
        LEGATO_SYSROOT=$($findtoolchain_path $TARGET sysroot)
    fi

    TOOLCHAIN_ROOT=$(readlink -f "$TOOLCHAIN_DIR/../../..")

    export PATH=$TOOLCHAIN_ROOT/usr/bin:$TOOLCHAIN_ROOT/usr/sbin:$TOOLCHAIN_ROOT/sbin:$PATH
}

# Function to find a tool, eventually considering the toolchain if FindToolchain
# has been called previously
FindTool() {
    TOOL_NAME=$1
    TOOL_VAR_DEST=$2

    # If tool path is already set in the environment, use that path
    if [ -n "${!TOOL_VAR_DEST}" ]; then
        return 0
    fi

    TOOL_PATH=$(which $TOOL_NAME 2> /dev/null)
    if [ -z "$TOOL_PATH" ]; then
        echo "Warning: Unable to find $TOOL_NAME within toolchain, please update your toolchain."
        return 1
    fi

    export ${TOOL_VAR_DEST}=${TOOL_PATH}
}

# scp command needs help with ipv6 else it gets confused by ':' so add '[' and ']'
# Assume last two items are the source and target files, everything before is options
# Hopefully there won't be any names with spaces in them
ParseScpArgs()
{
    if [[ $# -lt 2 ]]; then
        ExitWithError "In script, too few arguments to scp"
    fi
    length=$(($#-2))
    #echo "last two ${@:(-2)}"
    #echo "first few ${@:1:$length}"
    SCP_SOURCE_FILE="${@:(-2):1}"
    SCP_DEST_FILE="${@:(-1):1}"
    SCP_PASSED_ARGS="${@:1:$length}"
}

ScpFromTarget()
{
    if [ x"$TARGET_IP" = "x" ]; then
        echo "Scp called before SetTargetIP"
        exit 1
    fi
    ParseScpArgs $@
    scp $SCP_OPTS $FAST_SSH_OPTS $SCP_PASSED_ARGS "root@[$TARGET_IP]:$SCP_SOURCE_FILE" "$SCP_DEST_FILE" >/dev/null
}

ScpToTarget()
{
    if [ x"$TARGET_IP" = "x" ]; then
        echo "Scp called before SetTargetIP"
        exit 1
    fi
    ParseScpArgs $@
    scp $SCP_OPTS $FAST_SSH_OPTS $SCP_PASSED_ARGS "$SCP_SOURCE_FILE" "root@[$TARGET_IP]:$SCP_DEST_FILE" >/dev/null
}

SshToTarget ()
{
    if [ x"$TARGET_IP" = "x" ]; then
        echo "SshToTarget called before SetTargetIP"
        exit 1
    fi

    ssh $SSH_OPTS $FAST_SSH_OPTS root@$TARGET_IP "$@"
}

# Shared (Master) ssh
# Socket name could be anything but should be unique for each target
SSHSOCKET=""
StartFastSsh()
{
    if [ x"$TARGET_IP" = "x" ]; then
        echo "StartFastSsh called before SetTargetIP"
        exit 1
    fi
# more checking should be done for fail of this call and see if there is a stale ControlPath
# from a bad close, e.g.
    SSHSOCKET=~/.ssh/root@${TARGET_IP}_legato_tools
    FAST_SSH_OPTS="-o ControlPath=$SSHSOCKET"
    ssh $SSH_OPTS -M -f -N -o ControlPath=$SSHSOCKET root@$TARGET_IP
}

FastSsh()
{
    ssh -o ControlPath=$SSHSOCKET "$@"
}

FastScp()
{
    scp -o ControlPath=$SSHSOCKET "$@"
}

# Close the master connection
EndFastSsh()
{
#   redirect stderr to /dev/null as -q doesn't seem to work
    ssh -S $SSHSOCKET -q -O exit root@${TARGET_IP}_legato_tools 2>/dev/null
    SSHSOCKET=""
    FAST_SSH_OPTS=""
}

cleanup()
{
    exit_code=$?
    # I could call out to a local cleanup function if it exists.
    # For now I'll just clean up any ssh master sockets that may be lying around.
    if [ -n "$SSHSOCKET" ]; then
        EndFastSsh
    fi
    return $exit_code
}

trap cleanup EXIT
