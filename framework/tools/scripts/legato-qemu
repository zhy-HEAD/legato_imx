#!/bin/sh
copyright="
Copyright (C) Sierra Wireless Inc.
"

## Default
OFFSET_PORT=${OFFSET_PORT:=10000}
TELNET_PORT=${TELNET_PORT:=$(($OFFSET_PORT + 21))}
SSH_PORT=${SSH_PORT:=$(($OFFSET_PORT + 22))}
SIMU_PORT=${SIMU_PORT:=$(($OFFSET_PORT + 5000))}
HTTP_PORT=${HTTP_PORT:=$(($OFFSET_PORT + 8080))}
HTTPS_PORT=${HTTPS_PORT:=$(($OFFSET_PORT + 8443))}
ONLY_PREPARE=${ONLY_PREPARE:-0}
RESTART_ON_ERROR=${RESTART_ON_ERROR:-1}

ROOTFS_METHOD=-sd

USERFS_SIZE=${USERFS_SIZE:-2G}

HOST_ARCH=$(uname -m)

if [ -z "$VIRT_TARGET_ARCH" ]; then
    VIRT_TARGET_ARCH=x86
fi

## Help

if [[ "$1" == "--help" ]]; then
    echo -e ""
    echo -e "NAME"
    echo -e "\tlegato-qemu - launch qemu"
    echo -e ""
    echo -e "DESCRIPTION"
    echo -e "\tPrepare an launch qemu to host an instance of Legato."
    echo -e "\tAlso fetches qemu images from official servers and check for updates."
    echo -e ""
    echo -e "ENVIRONMENT"
    echo -e "\tThis script is parametrized through environment variables."
    echo -e "\t\tONLY_PREPARE: Do not run qemu, only prepare the environment"
    echo -e "\t\tRESTART_ON_ERROR: If 1 (default), relaunch qemu on errors"
    echo -e "\t\tOPT_LEGATO_IMG: Path to a Legato image"
    echo -e "\t\tOPT_TARGET: Platform to emulate"
    echo -e "\t\tOPT_PERSIST: Make changes to the image persistant or not"
    echo -e "\t\tOPT_KMESG: Kernel messages to console"
    echo -e "\t\tOPT_GDB: Launch GDB server to qemu"
    echo -e "\t\tOPT_KVM: Enable Hardware Acceleration (KVM)"
    echo -e "\t\tOPT_SERIAL: Bearer for serial port"
    echo -e "\t\t            - (blank, default) = Serial to console"
    echo -e "\t\t            - telnet = Serial to telnet"
    echo -e "\t\tOPT_NET: Networking interface"
    echo -e "\t\t         - user (default) = simulated internal qemu networking"
    echo -e "\t\t         - tap = Uses a tap interface (requires priviledges)"
    echo -e "\t\tOPT_IMA: Enable IMA (Integrity Measurement Architecture)"
    echo -e ""
    exit 0
fi

## Options

# Default values are provided here
# You can change them, but they will be overriden upon update of this script.
# Persistent changes can be added to an 'options' script that is sourced.

# Target
if [ -z "$OPT_TARGET" ]; then
    OPT_TARGET=virt
fi

# Persistent
if [ -z "$OPT_PERSIST" ]; then
    OPT_PERSIST=1
fi

# Kernel Messages to console
if [ -z "$OPT_KMESG" ]; then
    OPT_KMESG=1
fi

# GDB Server
if [ -z "$OPT_GDB" ]; then
    OPT_GDB=0
fi

# KVM
if [ -z "$OPT_KVM" ]; then
    OPT_KVM=0
fi

# Serial
if [ -z "$OPT_SERIAL" ]; then
    OPT_SERIAL=""
    #OPT_SERIAL="telnet" # Provide serial interface through telnet
fi

# Net
if [ -z "$OPT_NET" ]; then
    OPT_NET=""
    OPT_NET="user" # User mode networking, no need to be root
    #OPT_NET="tap"  # Uses existing tap interface
fi

# Net 2
if [ -z "$OPT_NET2" ]; then
    OPT_NET2=""
    #OPT_NET2="simu"
fi

# IMA
if [ -z "$OPT_IMA" ]; then
    OPT_IMA=0
fi

COLOR_TITLE="\033[1;94m"
COLOR_MSG="\033[2;37m"
COLOR_INFO="\033[1;36m"
COLOR_ERROR="\033[1;31m"
COLOR_WARN="\033[1;93m"
COLOR_OK="\033[1;32m"
COLOR_RESET="\033[0m"

function message {
    local color="$1"
    local message="$2"
    echo -e "$color" "$message" $COLOR_RESET
}

function check_ret {
    local retval=$?
    if [ $retval -ne 0 ]; then
        message $COLOR_ERROR "Exit Code $RETVAL"
        exit $retval
    fi
}

function img_url_for_target {
    local target=$1
    local img_type=$2

    local swi_dev=false
    if grep -q "sierrawireless.local" /etc/resolv.conf; then
        swi_dev=true
    fi

    # Determine QEmu Image source
    if [[ "$img_type" == "yocto" ]]; then
        if [ -z "$IMG_MIRROR_LINUX" ]; then
            if $swi_dev; then
                IMG_MIRROR_LINUX="http://get-legato/lxswi/merged/latest/master-virt/${target}/images"
            else
                IMG_MIRROR_LINUX="http://downloads.sierrawireless.com/legato/virt"
            fi
        fi

        IMG_SRC="${IMG_MIRROR_LINUX}/img-${target}.tar.bz2"

    elif [[ "$img_type" == "legato" ]]; then
        if [ -z "$IMG_MIRROR_LEGATO" ]; then
            if $swi_dev; then
                IMG_MIRROR_LEGATO="http://get-legato/legato/merged/latest/${target}"
            else
                IMG_MIRROR_LEGATO="http://downloads.sierrawireless.com/legato/latest/${target}"
            fi
        fi

        IMG_SRC="${IMG_MIRROR_LEGATO}/legato.squashfs"

    else
        message $COLOR_ERROR "Unknown image type '$img_type'"
        exit 1
    fi

    export IMG_SRC
}

function img_get_timestamp {
    local target=$1
    local img_type=$2

    img_url_for_target $target $img_type

    # Get image timestamp from server
    export IMG_TIMESTAMP=$(curl -I $IMG_SRC 2> /dev/null | sed -e 's/Last-Modified: //g;t;d' | xargs -i date -d "{}" +"%s")
}

function img_save_timestamp {
    local target=$1
    local img_type=$2
    local img_timestamp=$3

    local img_dest=$USER_DIR/img-$target

    if [ -z "$img_timestamp" ]; then
        message $COLOR_ERROR "Invalid timestamp"
        return
    fi

    message $COLOR_INFO "Saving image timestamp ($img_timestamp)"
    local ts_file="$img_dest/.img-timestamp-${img_type}"
    echo $img_timestamp > "$ts_file"
}

function check_new_image {
    local target=$1
    local img_type=$2

    local img_dest=$USER_DIR/img-$target

    img_get_timestamp $target $img_type

    local current_img_timestamp=0

    local ts_file="$img_dest/.img-timestamp-${img_type}"
    if [ -e "$ts_file" ]; then
        current_img_timestamp=$(cat "$ts_file")

        if [ -z "$current_img_timestamp" ]; then
            message $COLOR_WARN "Invalid timestamp"
            rm -f "$ts_file"
            current_img_timestamp=0
        fi
    fi

    if [ -z "$IMG_TIMESTAMP" ]; then
        message $COLOR_WARN "Unable to determine if a new image is available"
    elif [ $IMG_TIMESTAMP -ne $current_img_timestamp ]; then
        message $COLOR_WARN "New image available, delete $img_dest to upgrade"
    fi
}

# Fetch image from server
function fetch_image {
    local target=$1
    local img_type=$2

    local img_dest=$USER_DIR/img-$target

    img_url_for_target $target $img_type

    if ( [ "$img_type" == "yocto" ] && [ -e "$img_dest/rootfs.qcow2" ] ) ||
       ( [ "$img_type" == "legato" ] && [ -e "$img_dest/legato.squashfs" ] ); then

        check_new_image $target $img_type

        return 0
    fi

    message $COLOR_INFO "Fetching image for '$img_type' from server"

    if ! [ -e "$img_dest" ]; then
        message $COLOR_INFO "Create $img_dest to hold images ..."
        mkdir -p $img_dest
    fi

    message $COLOR_INFO "Fetching images from $IMG_SRC ..."
    local img_dest_name="$(basename $IMG_SRC)"
    (cd $img_dest && rm -f $img_dest_name && wget -O "$img_dest_name" -L $IMG_SRC)
    if [ $? -ne 0 ]; then
        message $COLOR_ERROR "Failed to retrieve image"
        exit 1
    fi

    if [[ "$img_dest_name" == *.tar.bz2 ]]; then
        (cd $img_dest && tar jxf "$img_dest_name")
        check_ret
    fi

    img_get_timestamp $target $img_type
    img_save_timestamp $target $img_type $IMG_TIMESTAMP
}

# Create snapshot from image
function create_snapshot {
    local img_src=$1
    local img_dest=$2

    message $COLOR_INFO "Create snapshot from rootfs ..."
    qemu-img create -f qcow2 -b $img_src $img_dest
    check_ret
}

# Version compare: less than or equal
function verlte {
    [  "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
}

# Version compare: less than
function verlt {
    [ "$1" = "$2" ] && return 1 || verlte $1 $2
}

function get_qemu_version {
    local qemu_bin_path=$1

    qemu_version=$($qemu_bin_path --version | sed 's/.*version \([\.0-9]*\).*/\1/g;t;d')

    message $COLOR_INFO "Testing QEmu candidate '$qemu_bin_path': version $qemu_version"
}

# Find qemu
function find_qemu_bin {
    local qemu_bin_name=qemu-system-$QEMU_ARCH
    message $COLOR_MSG "Looking for $qemu_bin_name ..."

    unset best_bin
    best_version="0"

    # In path
    if which $qemu_bin_name > /dev/null; then
        qemu_bin=$(which $qemu_bin_name)
        get_qemu_version $qemu_bin
        best_version=$qemu_version
        best_bin=$qemu_bin
    fi

    # In toolchains dir
    for toolchain_dir in $(env | grep '_TOOLCHAIN_DIR' | sed 's/[A-Z0-9]*_TOOLCHAIN_DIR=//g'); do
        qemu_bin="$toolchain_dir/../$qemu_bin_name"
        if [ -e "$qemu_bin" ]; then
            get_qemu_version $qemu_bin
            verlt $best_version $qemu_version
            if [ $? -eq 0 ]; then
                best_version=$qemu_version
                best_bin=$qemu_bin
            fi
        fi
    done

    if command -v findtoolchain >/dev/null; then
        toolchain_dir=$(findtoolchain $OPT_TARGET)
        qemu_bin="$toolchain_dir/../$qemu_bin_name"
        if [ -e "$qemu_bin" ]; then
            get_qemu_version $qemu_bin
            verlt $best_version $qemu_version
            if [ $? -eq 0 ]; then
                best_version=$qemu_version
                best_bin=$qemu_bin
            fi
        fi
    fi

    if [ -z "$best_bin" ]; then
        message $COLOR_ERROR "Unable to find qemu candidate for '$qemu_bin_name', please install qemu"
        if [[ "$ONLY_PREPARE" != 1 ]]; then
            exit 1
        fi
    fi

    QEMU_BIN=$best_bin
    QEMU_VERSION=$best_version

    return 0
}

## Arguments associated with options

SCRIPT_DIR=$( cd `dirname "$0"` && pwd )

# By default, store images & configuration in script directory
if [ -z "$USER_DIR" ]; then
    USER_DIR="$HOME/.legato/virt"
fi

ARG_COMMON=""
ARG_COMMON="$ARG_COMMON -nographic -echr 20"
#ARG_COMMON="$ARG_COMMON -no-reboot"

# Global options
if [ -e "$USER_DIR/options" ]; then
    message $COLOR_MSG "Loading options ..."
    source $USER_DIR/options
fi

# Per-host options
if [ -e "$USER_DIR/options.$HOSTNAME" ]; then
    message $COLOR_MSG "Loading options for $HOSTNAME ..."
    source $USER_DIR/options.$HOSTNAME
fi

# Target
if [ "$OPT_TARGET" == "virt" ]; then
    OPT_TARGET="virt-$VIRT_TARGET_ARCH"
fi

# Configure
function configure_virt_common {
    message $COLOR_TITLE "Virtual target ($VIRT_TARGET_ARCH)"

    # Linux
    if [ -z "$KERNEL_IMG" ] && [ -z "$ROOTFS_IMG" ]; then
        fetch_image $OPT_TARGET 'yocto'

        KERNEL_IMG="$USER_DIR/img-$OPT_TARGET/kernel"
        ROOTFS_IMG="$USER_DIR/img-$OPT_TARGET/rootfs.qcow2"
    fi

    # Legato image
    if [ -z "$LEGATO_IMG" ]; then
        LEGATO_IMG="$USER_DIR/img-$OPT_TARGET/legato.squashfs"

        if [ -e "$LEGATO_ROOT/build/${OPT_TARGET}/legato.squashfs" ]; then
            # Use the local image if available
            ln -sf $LEGATO_ROOT/build/${OPT_TARGET}/legato.squashfs $LEGATO_IMG
        else
            fetch_image $OPT_TARGET 'legato'
        fi
    fi

    # User FS image
    if [ -z "$USERFS_IMG" ] && [ "$OPT_PERSIST" -eq 1 ]; then
        USERFS_IMG="$USER_DIR/img-$OPT_TARGET/userfs.qcow2"

        if [ ! -e "$USERFS_IMG" ]; then
            USERFS_IMG_ext4="$USER_DIR/img-$OPT_TARGET/userfs.ext4"

            # Generate an empty ext4 partition that will be used as /mnt/flash
            qemu-img create -f raw "$USERFS_IMG_ext4" $USERFS_SIZE

            mkfs -t ext4 "$USERFS_IMG_ext4"

            # Convert to qcow2 (mostly to save space)
            qemu-img convert -f raw -O qcow2 "$USERFS_IMG_ext4" "$USERFS_IMG"
            USERFS_IMG="$USERFS_IMG"
        fi
    fi

    # Config
    if [ -z "$QEMU_CONFIG" ]; then
        QEMU_CONFIG="$USER_DIR/img-$OPT_TARGET/qemu-config"
    fi

    # Let the image define it's own default arguments for QEmu.
    # It is still possible to override them after that.
    if [ -e "$QEMU_CONFIG" ]; then
        source "$QEMU_CONFIG"
    fi
}

ARG_TARGET=''
CONSOLE_TTY='ttyS0'
ROOTFS_METHOD=-hda
if [[ "$OPT_TARGET" == "virt-x86" ]]; then

    CMDLINE="root=/dev/hda1 rw"

    configure_virt_common

elif [[ "$OPT_TARGET" == "virt-arm" ]]; then

    CMDLINE="root=/dev/sda1 rootwait"
    ARG_TARGET='-machine versatilepb'
    CONSOLE_TTY='ttyAMA0'

    configure_virt_common

else
    message $COLOR_ERROR "This target is not supported"
    exit -1
fi

if [ "$OPT_PERSIST" -eq 1 ]; then
    message $COLOR_MSG "Persistent mode"
else
    message $COLOR_MSG "Volatile mode (changes won't be committed to the rootfs)"
    ARG_PERSIST="-snapshot"

    mkdir -p $USER_DIR/img-$OPT_TARGET
    ROOTFS_IMG_VOLATILE=$USER_DIR/img-$OPT_TARGET/rootfs.snapshot

    # Create snapshot from real rootfs if it doesn't exist
    if ! [ -e "$ROOTFS_IMG_VOLATILE" ]; then
        create_snapshot $ROOTFS_IMG $ROOTFS_IMG_VOLATILE
        ROOTFS_IMG=$ROOTFS_IMG_VOLATILE
    fi
fi

# DTB
if [ -e "$DTB_IMG" ]; then
    ARG_DTB="-dtb ${DTB_IMG}"
fi

# Initrd image
if [ -e "$INITRD_IMG" ]; then
    ARG_INITRD="-initrd ${INITRD_IMG}"
fi

# Legato image
if [ -e "$LEGATO_IMG" ]; then
    ARG_LEGATO="-drive format=raw,index=1,file=${LEGATO_IMG}"
fi

# User FS image
if [ -e "$USERFS_IMG" ]; then
    ARG_USERFS="-drive format=qcow2,index=2,file=${USERFS_IMG}"
fi

# Kernel Messages
if [ "$OPT_KMESG" -eq 1 ]; then
    message $COLOR_MSG "Kernel messages to console"
    CMDLINE="$CMDLINE console=$CONSOLE_TTY"
else
    message $COLOR_MSG "Kernel messages discarded"
fi

# GDB Server
if [ "$OPT_GDB" -eq 1 ]; then
    message $COLOR_MSG "GDB Server"
    ARG_GDB="-s"
fi

# KVM
if [[ "$OPT_KVM" == "1" ]] && [[ "$OPT_TARGET" == "virt-x86"* ]]; then
    ARG_KVM="--enable-kvm"
fi

# Serial
if [ "$OPT_SERIAL" == "telnet" ]; then
    message $COLOR_MSG "Console to telnet"
    message $COLOR_INFO " => Access console through 'telnet localhost $TELNET_PORT'"
    #ARG_SERIAL="-serial mon:telnet::$TELNET_PORT,server,nowait"
    ARG_SERIAL="-serial telnet::$TELNET_PORT,server,nowait -monitor stdio"
else
    ARG_SERIAL=
fi

# AT
if [ -n "$OPT_ATCMD" ]; then
    ARG_ATCMD="-chardev serial,id=atcmd,path=${OPT_ATCMD} -device isa-serial,chardev=atcmd"
fi

# PPP
if [ -n "$OPT_PPPCMD" ]; then
    ARG_PPPCMD="-chardev serial,id=pppcmd,path=${OPT_PPPCMD} -device isa-serial,chardev=pppcmd"
fi

# Net
NET_DRV=${NET_DRV:-"e1000"}
if [ "$NET_DRV" == "virtio" ]; then
    NET_DRV="virtio-net-pci"
fi

# Net: vlan 0
if [ "$OPT_NET" == "user" ]; then
    message $COLOR_MSG "Network in user mode"

    NET_ADDR=",net=192.168.76.0/24"

    # Ports forwarded from guest to host
    NET_HOSTFWD=",hostfwd=tcp::$SSH_PORT-:22"
    NET_HOSTFWD="${NET_HOSTFWD},hostfwd=tcp::$SIMU_PORT-:5000"
    # Ports used by the sample app 'httpServer'
    NET_HOSTFWD="${NET_HOSTFWD},hostfwd=tcp::$HTTP_PORT-:8080"
    NET_HOSTFWD="${NET_HOSTFWD},hostfwd=tcp::$HTTPS_PORT-:8443"

    # Restrict = when yes, isolate guest from host network
    #NET_RESTRICT=",restrict=yes"
    NET_RESTRICT=",restrict=off"

    message $COLOR_INFO " => Access SSH through 'ssh -p $SSH_PORT root@localhost'"
    ARG_NET="-device $NET_DRV,netdev=vlan0 -netdev user,id=vlan0$NET_ADDR$NET_RESTRICT$NET_HOSTFWD"
elif [ "$OPT_NET" == "tap" ]; then
    message $COLOR_MSG "Network through tap interface"

    # Default interface
    if [ -z "$TAP_IF" ]; then
        TAP_IF=tap0
    fi

    message $COLOR_INFO " => Using interface $TAP_IF"
    ARG_NET="-device $NET_DRV,netdev=vlan0,macaddr=b2:5b:96:c8:51:34 -netdev tap,id=vlan0,ifname=$TAP_IF,script=no,downscript=no"
else
    ARG_NET=
fi

# Net: vlan 1
if [ "$OPT_NET2" == "simu" ]; then
    message $COLOR_MSG "Network interface for simulation"
    ARG_NET2="-device $NET_DRV,netdev=vlan1 -netdev user,id=vlan1,restrict=off"
else
    ARG_NET2=
fi

# Sound
if which pulseaudio > /dev/null && pulseaudio --check; then
    message $COLOR_INFO " => Sound through PulseAudio"
    export QEMU_AUDIO_DRV=pa
else
    message $COLOR_INFO " => No sound emulation"
    export QEMU_AUDIO_DRV=none
fi

# IMA
if [[ "$OPT_IMA" == "1" ]] || \
   [[ "$OPT_IMA" == "fix" ]] || \
   [[ "$OPT_IMA" == "log" ]]; then
    if [[ "$OPT_IMA" == "fix" ]]; then
        IMA_KERNEL_CMDLINE_OPTIONS="${IMA_KERNEL_CMDLINE_OPTIONS//enforce/fix}"
    elif [[ "$OPT_IMA" == "log" ]]; then
        IMA_KERNEL_CMDLINE_OPTIONS="${IMA_KERNEL_CMDLINE_OPTIONS//enforce/log}"
    fi

    message $COLOR_INFO " => With IMA ($IMA_KERNEL_CMDLINE_OPTIONS)"

    if [[ "$IMA_BUILD" != "1" ]] || [ -z "$IMA_KERNEL_CMDLINE_OPTIONS" ]; then
        message $COLOR_ERROR "Trying to enable IMA while Linux build is not IMA-enabled."
        exit 1
    fi

    CMDLINE="$CMDLINE $IMA_KERNEL_CMDLINE_OPTIONS"
fi

# QEmu Pid file
if true; then
    PID_FILE=${PID_FILE:-$USER_DIR/qemu.pid}

    if [ -e "$PID_FILE" ]; then
        PID=$(cat $PID_FILE)

        if kill -0 $PID 2> /dev/null; then
            message $COLOR_ERROR "QEmu is already running"
            exit 1
        fi

        rm $PID_FILE
    fi

    ARG_PID="-pidfile $PID_FILE"
fi

ROOTFS="$ROOTFS_METHOD $ROOTFS_IMG"

if [ -z "$QEMU_BIN" ]; then
    if [ -z "$QEMU_ARCH" ]; then
        if [[ "$VIRT_TARGET_ARCH" == "x86" ]]; then
            QEMU_ARCH=i386
        elif [[ "$VIRT_TARGET_ARCH" == "x86_64" ]]; then
            QEMU_ARCH=x86_64
        else
            QEMU_ARCH=arm
        fi
    fi

    find_qemu_bin
else
    get_qemu_version $QEMU_BIN
    if [ -z "$qemu_version" ]; then
        message $COLOR_ERROR "Unable to qemu version"
        exit 1
    fi

    QEMU_VERSION=$qemu_version
fi

message $COLOR_MSG "Kernel command line:"
message $COLOR_MSG " => $CMDLINE"

message $COLOR_MSG "QEmu binary ($QEMU_ARCH):"
message $COLOR_MSG " => $QEMU_BIN ($QEMU_VERSION)"

ARGS="-kernel $KERNEL_IMG $ROOTFS $ARG_DTB $ARG_INITRD $ARG_LEGATO $ARG_USERFS $ARG_COMMON $ARG_TARGET $ARG_PERSIST $ARG_NET $ARG_NET2 $ARG_SERIAL $ARG_SOUND $ARG_PID $ARG_GDB $ARG_KVM $ARG_ATCMD $ARG_PPPCMD"
message $COLOR_MSG "QEmu arguments:"
message $COLOR_MSG " => $(echo "$ARGS" | sed 's/ -/\\n     -/g')"

if [ "$RESTART_ON_ERROR" -eq 1 ]; then
    message $COLOR_MSG "Restarting on errors"
fi

if [ "$ONLY_PREPARE" -eq 1 ]; then
    message $COLOR_MSG "Only preparing"
    exit 0
fi

message $COLOR_OK "Starting ..."

if [ "$OPT_KMESG" -ne 1 ]; then
   message $COLOR_WARN " Kernel logs disabled, it should take few seconds to boot"
fi

while true; do
    QEMU_START=$(date +%s)

    $QEMU_BIN $ARGS -append "$CMDLINE"
    EXIT_CODE=$?

    QEMU_END=$(date +%s)

    # Restart on error, if enabled and if the process took more than 5 seconds to exit.
    if [ $EXIT_CODE -ne 0 ] && \
       [ $(( $QEMU_END - $QEMU_START)) -gt 5 ] && \
       [ "$RESTART_ON_ERROR" -eq 1 ]; then
        echo "QEmu Exit: $EXIT_CODE (restarting)"
    else
        echo "QEmu Exit: $EXIT_CODE"
        break
    fi
done

if [ -e "$PID_FILE" ]; then
    rm $PID_FILE
fi

exit $EXIT_CODE

