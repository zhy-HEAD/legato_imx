#!/usr/bin/env python2.7

from cffi import FFI
import argparse
import os
import glob
import re

parser = argparse.ArgumentParser(
    description='Compile files generated by ifgen (e.g. le_XYZ_cdef.h) into a .so for Python.')
parser.add_argument('cdef_path', metavar='./le_XYZ_cdef.h',
                    help='the path to the cdef.h file from ifgen.')
parser.add_argument('-o', dest='out_dir', help='Output directory (defaults to where the cdef is)')

args = parser.parse_args()
cdef_path = args.cdef_path
out_dir = args.out_dir or os.path.dirname(cdef_path)
api_name = os.path.basename(cdef_path).split('_cdef.h')[0]

ffibuilder = FFI()

# Workaround for <fts.h> not working with <pyconfig.h>'s file offset define
# should be used with -D_FTS_H
c_source = """
#undef __USE_FILE_OFFSET64
#undef _FTS_H
#include <fts.h>
#include "C/{0}_client.c"

const char** {0}_ServiceInstanceNamePtr;
""".format(api_name)

ffibuilder.set_source(api_name+'_native', c_source)

cdef = ""

# Regexp for the C prototype of functions. Can be 'extern "Python" xxx yyyy'
functionProto = re.compile('^\w+ [\w\"]+( \w+)*\n*\(\n*( +.*\n)+\);\n*',
                           re.MULTILINE)
# Regexp for the service instance name
serviceInstancePtr = re.compile("const char\*\* \w*ServiceInstanceNamePtr;")
# FIXME: cffi produces an error for typedef with parameter of type le_result_t.
resultParam = re.compile("    le_result_t result,")

# Add the cdef of the included APIs (USETYPES in the .api file)
# But clean the cdef before to avoid errors.
for apiFile in glob.glob(os.path.dirname(cdef_path) + "/includedApi/*_cdef.h"):
    with open(apiFile) as f:
        # Remove the functions. Keep only the typedefs, the structures
        # and the constants
        data = re.sub(functionProto, "", f.read())
        data = re.sub(serviceInstancePtr, "", data)
        # TO REMOVE
        data = re.sub(resultParam, "int result,", data)
        cdef += data

# Add the main cdef file
with open(cdef_path) as f:
    cdef += f.read()

ffibuilder.cdef(cdef, override=True)

if __name__ == "__main__":
    ffibuilder.emit_c_code(os.path.join(out_dir, api_name+'_native.c'))
