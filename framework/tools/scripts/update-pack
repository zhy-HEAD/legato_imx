#!/bin/bash

copyright="
Copyright (C) Sierra Wireless Inc.
"

if ! [ $LEGATO_ROOT ]; then echo "Run bin/legs first" >&2; exit 1; fi
. "$(dirname "${BASH_SOURCE[0]}")/shlib"

help_short_desc="Create an update package for a target device."

help_usage=(
"-ar APP_NAME"
"-m FIRMWARE_FILE"
"-d UPDATE_FILE"
"-h"
"--help"
"-v"
)

help_long_description=(
"Creates a package containing update instructions and/or content to be installed on a"
"target device."
""
"When creating an update pack for a target device,"
""
"Options used when creating an update pack:"
""
"-ar APP_NAME"
"    Specify an application to be removed from the target."
""
"-m FIRMWARE_FILE"
"    Add a modem firmware image to the update for installation on the target."
""
"-o FILE_NAME"
"    Specify output update file name. If not specified, a default file name is generated."
"    If \"-\" is specified, then output will be sent to the standard output stream."
""
"Other options:"
""
"-v"
"    Prints the Legato framework version."
""
"-d UPDATE_FILE"
"    Prints an update file's manifest to the standard output stream."
""
"-h"
"--help"
"    Print this help text."
""
"Notes:"
""
"Update files for system update are generated by 'mksys'."
"Update files for app install/update are generated by 'mkapp'."
""
"Examples:"
""
"# Create an update package helloWorld.remove.update that removes the helloWorld app."
"$(basename "$0") -o helloWorld.remove.update -ar helloWorld"
""
"# Display manifest information from an update file."
"$(basename "$0") -d helloWorld.update"
)


# Define some constants.
readonly VERSION_PATH=$LEGATO_ROOT/version
readonly APP_PLATFORM="\"app\""
readonly FIRMWARE_PLATFORM="\"firmware\""
readonly SCRIPT_PLATFORM="\"script\""
readonly CMD_INSTALL="\"install\""
readonly CMD_REMOVE="\"remove\""
readonly MANIFESTSIZE_FIELD_WIDTH=8


# Shell global variables
UpdateFile=""


# Returns Legato version.
GetLegatoVersion()
{
    if ! [ -f "$VERSION_PATH" ]
    then
        ExitWithError "Bad or missing legato version file: '$VERSION_PATH'"
    fi

    LEGATO_VERSION=`cat $VERSION_PATH`
    printf "$LEGATO_VERSION"
}


# If no parameter given, just print the help.
if [ $# -eq 0  ]
then
    ExitWithError "Too few arguments."
fi


# Check if they are asking for help.
CheckForHelp $@


# Check if they are asking for version.
if [ "$1" = "-v" -o "$1" = "version" -o "$1" = "--version" ]
then
    echo "Legato version: $(GetLegatoVersion)"
    exit 0
fi


# Check if they are asking for pretty printing manifest.
if [ "$1" = "-d" -o "$1" = "dump" -o "$1" = "--dump" ]
then
    UpdateFile=$2

    if ! [ "$UpdateFile" ]
    then
        ExitWithError "Missing argument: '-d' requires an update file."
    fi

    awk '/\}/ { print "}" ; exit 0 }; { print }' $UpdateFile

    exit 0
fi


# Minimum number of parameter must be 2, otherwise exit
if [ $# -lt 2 ]
then
    ExitWithError "Missing parameters."
fi


AppName=
FirmwareFile=

# Parse command-line arguments.
while getopts ":am:o:" opt; do

    case $opt in

    a)
        # Application item, it should be followed by remove command.
        getopts ":r:" cmd

        case $cmd in

        r)
            # Remove command
            AppName="$OPTARG"
            ;;

        \?)
            ExitWithError "Unrecognized option '-a$OPTARG'.  Did you mean '-ar'?"
            ;;

        :)
            ExitWithError "Argument missing: '-a$OPTARG' requires an app name."
            ;;

        esac
        ;;
    m)
        # Modem firmware item

        if [ "$FirmwareFile" ]
        then
            ExitWithError "Can't do multiple firmware images in the same update."
        fi

        FirmwareFile="$OPTARG"
        ;;

    o)
        # Output file
        UpdateFile="$OPTARG"
        ;;

    \?)
        ExitWithError "Unrecognized option '-$OPTARG'."
        ;;

    :)
        ExitWithError "Argument missing: '-$OPTARG' requires a firmware file."
        ;;

    esac

done


if [ "$AppName" ]
then
    # Not allowed to do both -ar and -m at the same time.
    if [ "$FirmwareFile" ]
    then
        ExitWithError "Can't do both -ar and -m at the same time."
    fi

    # If the output file name was not specified, use appName.remove.update.
    if ! [ "$UpdateFile" ]
    then
        UpdateFile="$AppName.remove.update"
    fi

    # Generate the JSON data and write it to the update file.
    (
        printf '{\n'
        printf '  "command":"removeApp",\n'
        printf '  "name":"%s"\n' $AppName
        printf '}'
    ) > $UpdateFile

elif [ "$FirmwareFile" ]
then
    # Get the size of the update file.
    Size=$(stat -L -c%s "$FirmwareFile")
    if [ $? -ne 0 ] || [ $Size -eq 0 ]
    then
        ExitWithError "Bad firmware file: '$FirmwareFile'"
    fi

    # If the output file name was not specified, use FirmwareFile.update.
    if ! [ "$UpdateFile" ]
    then
        UpdateFile="$(basename $FirmwareFile).update"
    fi

    # Generate the JSON data and write it to the update file.
    (
        printf '{\n'
        printf '  "command":"updateFirmware",\n'
        printf '  "size":%s\n' $Size
        printf '}'
    ) > "$UpdateFile"

    # Concatenate the firmware file to the end of the JSON data.
    cat "$FirmwareFile" >> "$UpdateFile"

else
    ExitWithError "No command specified."
fi
