#!/bin/bash

# Fails on errors.
set -e

copyright="
Copyright (C) Sierra Wireless Inc.
"
. "$(dirname "${BASH_SOURCE[0]}")/shlib"

# Generates a key pair, configures the local user's account to use that key to talk to the
# specified IP address, and installs the public key in that target device's root account's
# list of authorized keys.

PRIVATE_KEY_FILE=~/.ssh/id_rsa.legatoTarget
PUBLIC_KEY_FILE=$PRIVATE_KEY_FILE.pub
help_short_desc="Configure secure shell access to target device."

help_usage=(
"[TARGET_IP]"
)

help_long_description=(
"$commandName generates a key pair, configures the local user's account"
"to use that key to talk to the specified IP address, and installs the"
"public key in that target device's root account's list of authorized keys."
""
"Follow the interactive instructions provided by the tool."
)

CheckForHelp $@

# Did they specify too many arguments?
if [ $# -gt 1 ]
then
    ExitWithError "Too many arguments."
fi

# Make sure they gave us a target IP address.
SetTargetIP $1

# If there isn't already a key file for Legato targets, create one.
if ! [ -e  $PRIVATE_KEY_FILE ]
then
    echo "Generating new key pair..."
    ssh-keygen -t rsa -b 4096 -f $PRIVATE_KEY_FILE -C "$USER's key for Legato target devices."
fi

# Create an SSH configuration file for the user, if there isn't already one.
touch ~/.ssh/config

# Make sure the SSH configuration file is only readable and writeable by the current user.
chmod 600 ~/.ssh/config

# If the Legato targets key file isn't already listed in the user's SSH configuration,
# and the target host IP address is not already listed too (because the IP address might
# change or the user might have multiple targets), then add an entry to the user's SSH
# configuration so that SSH will always use this key for this target.
if ! grep "$PRIVATE_KEY_FILE" ~/.ssh/config > /dev/null || ! grep "Host $TARGET_IP" ~/.ssh/config > /dev/null
then
    echo >> ~/.ssh/config
    echo "Host $TARGET_IP" >> ~/.ssh/config
    echo "  IdentityFile $PRIVATE_KEY_FILE" >> ~/.ssh/config
    echo "  User root" >> ~/.ssh/config
    echo "  Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc" >> ~/.ssh/config
fi

# Create an SSH known_hosts file for the user, if there isn't already one.
touch ~/.ssh/known_hosts

# Make sure the SSH known_hosts file is only readable and writeable by the current user.
chmod 600 ~/.ssh/known_hosts

# Remove all keys belonging to our target from our list of known hosts.
ssh-keygen -f "/home/$USER/.ssh/known_hosts" -R $TARGET_IP

# Add the targets host key to our list of known hosts.
echo "Adding the target to the list of known hosts."
ssh-keyscan -H -t rsa $TARGET_IP >> "/home/$USER/.ssh/known_hosts"

# Connect to the target and copy the
ON_TARGET_KEY_FILE=$(basename $PUBLIC_KEY_FILE).$USER
echo ""
echo "Connecting to the target...  (ENTER TARGET'S ROOT PASSWORD WHENEVER PROMPTED FOR A PASSWORD)"
echo "(Just hit ENTER if your target doesn't have a root password.)"
cat $PUBLIC_KEY_FILE | SshToTarget "
    if grep $USER .ssh/authorized_keys > /dev/null 2>&1
    then
        echo \"Key already installed in .ssh/authorized_keys on target for user $USER.\"
    else
        mkdir -p .ssh
        cat >> .ssh/authorized_keys
        chmod 700 .ssh
        chmod 600 .ssh/authorized_keys
        echo \"SSH Keys successfully setup for target $TARGET_IP.\"
    fi
    "
