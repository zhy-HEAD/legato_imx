{#-
 #  Jinja2 template for generating Java interface Legato APIs.
 #
 #  Note: Java comments apply to the generated code.  For example this template itself is not
 #  autogenerated, but the comment is copied verbatim into the generated file when the template is
 #  expanded.
 #
 #  Copyright (C) Sierra Wireless Inc.
 #}
{%- for comment in fileComments %}
{{comment|FormatHeaderComment}}
{%- endfor %}
{%- import "pack.templ" as pack with context %}

// Generated interface for API {{apiName}}.
// This is a generated file, do not edit.

package io.legato.api;

import io.legato.Ref;
import io.legato.IntType;
import io.legato.Result;
import io.legato.OnOff;
import io.legato.MessageBuffer;
import java.util.Map;
import java.util.HashMap;
import java.io.FileDescriptor;
import java.math.BigInteger;

public interface {{apiName}} {
{% for definition in definitions %}
	{%- if definition.value is number %}
	public static final long {{definition.name}} = {{definition.value}}L;
	{%- else %}
	public static final String {{definition.name}} = "{{definition.value}}";
	{%- endif %}
{%- endfor %}
{% for type in types %}
	{#- TODO: Is this exception necessary?  Maybe handler references should have a class as well #}
	{%- if type is ReferenceType and type is not HandlerReferenceType %}
	public class {{type.name}}Ref {
		private final long nativeRef;

		public static {{type.name}}Ref fromValue(long ref) {
			// All references passed through an API must be safe references, so 0-bit will be set.
			if (ref == 0) {
				return null;
			}
			if (ref % 2 == 1) {
				return new {{type.name}}Ref(ref);
			}
			throw new IllegalStateException("Invalid reference for {{type.name}}Ref: " + ref);
		}

		private {{type.name}}Ref(long newRef) {
			nativeRef = newRef;
		}

		public long getRef() {
			return nativeRef;
		}
	}
	{%- elif type is BitMaskType %}
	public static class {{type.name}} {
		public static final IntType TYPE = IntType.fromSize({{type.size}}, true);

		{%- for element in type.elements %}
		public static final BigInteger {{element.name}} = new BigInteger("{{element.value}}");
		{%- endfor %}

		private final BigInteger value;

		public {{type.name}}(BigInteger newValue) {
			value = newValue;
		}

		public static {{type.name}} fromValue(BigInteger newValue) {
			return new {{type.name}}(newValue);
		}

		public BigInteger getValue() {
			return value;
		}

		public IntType getType() {
			return TYPE;
		}
	}
	{%- elif type is EnumType %}
	public enum {{type.name}} {
		{% for element in type.elements -%}
		{{element.name}}("{{element.value}}"){% if loop.last %};{% else %},{% endif %}
		{%- endfor %}

		public static final IntType TYPE = IntType.fromSize({{type.size}}, true);
		private BigInteger value;

		{{type.name}}(String newValue) {
			value = new BigInteger(newValue);
		}

		public BigInteger getValue() {
			return value;
		}

		public static IntType getType() {
			return TYPE;
		}

		public static {{type.name}} fromValue(BigInteger value) {
			for ({{type.name}} out : values()) {
				if (out.value.equals(value)) {
					return out;
				}
			}
			throw new IllegalStateException();
		}
	}
	{%- elif type is HandlerType %}
	public interface {{type.name}} {
		public void handle(
			{%- for parameter in type.parameters -%}
			{{parameter|FormatParameter}}{% if not loop.last %}, {% endif %}
			{%- endfor -%}
			);
	}
        {%- elif type is StructType %}
        public class {{type.name}} {
                {%- for member in type.members %}
                public {{member.apiType|FormatType}} {{member.name}};
                {%- endfor %}

                public static void Pack(MessageBuffer buffer, {{type.name}} value)
                {
                    {%- for member in type.members %}
                    {%- if member is ArrayMember %}
                    buffer.writeInt(value.{{member.name}}.length);
                    for (int i = 0; i < value.{{member.name}}.length; ++i)
                    {
                        {{pack.PackValue(member.apiType, "value." + member.name)}}
                    }
                    {%- elif member is StringMember %}
                    buffer.writeString(value.{{member.name}}, {{member.maxCount}});
                    {%- else %}
                    {{pack.PackValue(member.apiType, "value." + member.name)}}
                    {%- endif %}
                    {%- endfor %}
                }

                public static {{type.name}} Unpack(MessageBuffer buffer)
                {
                    {{type.name}} value = new {{type.name}}();

                    {%- for member in type.members %}
                    {%- if member is ArrayMember %}
                    value.{{member.name}} = new {{member.apiType|FormatType}}[buffer.readInt()];
                    if (value.{{member.name}}.length > {{member.maxCount}})
                    {
                        throw new IllegalStateException("Invalid size for structure member: {{member.name}}");
                    }
                    for (int i = 0; i < value.{{member.name}}.length; i++)
                    {
                        value.{{member.name}}[i] =
                            {{pack.UnpackValue(member.apiType, "value." + member.name)}};
                    }
                    {%- else %}
                    value.{{member.name}} =
                        {{pack.UnpackValue(member.apiType, "value." + member.name)}};
                    {%- endif %}
                    {%- endfor %}

                    return value;
                }
        }
	{%- endif %}
{% endfor %}
{% for function in functions %}
	public {{function.returnType|FormatType}} {{function.name}}(
		{%- for parameter in function.parameters -%}
		{{parameter|FormatParameter}}{% if not loop.last %}, {% endif %}
		{%- endfor -%}
		);
{% endfor %}
}
