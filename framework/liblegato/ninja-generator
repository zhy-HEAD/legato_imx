#!/bin/bash
# --------------------------------------------------------------------------------------------------
# Ninja build script generator for the liblegato build.
#
# Copyright (C) Sierra Wireless Inc.
# --------------------------------------------------------------------------------------------------

# Ensure all the required variables are set.
if [ -z "$LEGATO_ROOT" ]
then
    echo "**ERROR: LEGATO_ROOT is not set." 1>&2
    exit 1
fi

if [ -z "$LEGATO_TARGET" ]
then
    echo "**ERROR: LEGATO_TARGET is not set." 1>&2
    exit 1
fi

if [ -z "$CC" ]
then
    echo "**ERROR: CC is not set." 1>&2
    exit 1
fi

if [ -z "$BUILD_DIR" ]
then
    echo "**ERROR: BUILD_DIR is not set." 1>&2
    exit 1
fi

DEBUG_DIR=$BUILD_DIR/../debug

NINJA_SCRIPT=$BUILD_DIR/build.ninja
NINJA_SCRIPT_GENERATOR=$0

BIN_DIR=$BUILD_DIR/bin
LIB_DIR=$BUILD_DIR/lib
SRC_DIR=$LEGATO_ROOT/framework/liblegato

# Turn a list of source file paths into a list of paths to the object (.o) files that they will
# be compiled into.
function ObjectsFromSources()
{
    for sourceFile in $*
    do
        prefix_dir="$(basename $(dirname $sourceFile))/"
        if [ "${prefix_dir}" = "/" ]; then
            prefix_dir=
        fi
        printf "%s" "$BUILD_DIR/obj/${prefix_dir}$(basename $sourceFile).o "
    done
}

# On failure, clean out ninja build script
trap "rm -f $NINJA_SCRIPT" EXIT

# Clean out previous ninja script, put in header
cat > $NINJA_SCRIPT <<EOF
# Build script for the Legato application framework's C runtime library (liblegato).

# == Auto-generated file.  DO NOT EDIT. ==
# == Generated by $0 ==

EOF

LIBLEGATO_SOURCES=$(ls $SRC_DIR/*.c)

for module_path in $(find -L $SRC_DIR/* -type d -prune); do
    ninja_config=${module_path}/ninja-config
    module_name=${module_path#$SRC_DIR/}
    config_name=LE_CONFIG_${module_name^^}
    if [ "${!config_name}" = y ]; then
        [[ ! -f $ninja_config ]] || source $ninja_config
        LIBLEGATO_SOURCES="${LIBLEGATO_SOURCES} $(ls ${module_path}/*.c)"
        CFLAGS="${CFLAGS} -I${module_path}"
    fi
done

# Include auto-generated header directory.
CFLAGS="${CFLAGS} -I${LEGATO_ROOT}/build/${TARGET}/framework/include"


LIBLEGATO_SHARED_NAME=$LIB_DIR/liblegato.so
LIBLEGATO_STATIC_NAME=$LIB_DIR/liblegato.a

LIBLEGATO_OBJECTS=$(ObjectsFromSources $LIBLEGATO_SOURCES)

cat >> $NINJA_SCRIPT <<END-OF-HERE-DOC
builddir = $BUILD_DIR

rule Compile
  description = Compiling liblegato source file
  depfile = \$out.d
  command = $CCACHE $CC -MMD -MF \$out.d -c \$in -o \$out -Wall -Werror \$flags \$
            -DLE_COMPONENT_NAME=framework \$
            -DLE_FILENAME=\`basename \$in\` \$
            -I$LEGATO_ROOT/framework/include \$
            -I$LEGATO_ROOT/framework/liblegato

END-OF-HERE-DOC

if [ "${LE_CONFIG_STRIP_STAGING_TREE}" = y ]; then

    cat >>$NINJA_SCRIPT <<EOF
rule DynamicLink
  description = Dynamic linking liblegato
  command = $CC -shared -Wl,--build-id -o \$out \$in -lpthread -lrt -ldl $NINJA_LDFLAGS \$
            && $LEGATO_ROOT/framework/tools/scripts/splitdebug -d $DEBUG_DIR \$out

EOF
else
    cat >>$NINJA_SCRIPT <<EOF
rule DynamicLink
  description = Dynamic linking liblegato
  command = $CC -shared -Wl,--build-id -o \$out \$in -lpthread -lrt -ldl $NINJA_LDFLAGS

EOF
fi

cat >>$NINJA_SCRIPT <<END-OF-HERE-DOC
rule StaticLink
  description = Static linking liblegato
  command = $AR rcs \$out \$in

rule RegenNinjaScript
  description = Regenerating framework build script
  generator = 1
  command = export LEGATO_TARGET=$LEGATO_TARGET && \$
            export LEGATO_ROOT="$LEGATO_ROOT" && \$
            $NINJA_SCRIPT_GENERATOR

END-OF-HERE-DOC

if [[ "$LIBLEGATO_SHARED" = y ]]; then
    echo "build ${LIBLEGATO_SHARED_NAME} : DynamicLink $LIBLEGATO_OBJECTS"
    echo
fi >> $NINJA_SCRIPT

# Always build static liblegato -- the start daemon needs it even on Linux
cat >> $NINJA_SCRIPT <<EOF
build ${LIBLEGATO_STATIC_NAME} : StaticLink $LIBLEGATO_OBJECTS

EOF

for sourceFile in $LIBLEGATO_SOURCES
do
    echo "build $(ObjectsFromSources $sourceFile) : Compile $sourceFile"
    echo "  flags = $CFLAGS"
    echo

done >> $NINJA_SCRIPT

echo "build $NINJA_SCRIPT : RegenNinjaScript | $NINJA_SCRIPT_GENERATOR" >> $NINJA_SCRIPT

trap - EXIT
