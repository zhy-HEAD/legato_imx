//--------------------------------------------------------------------------------------------------
/**
 * @page c_sup_ctrl Supervisor Control API
 *
 * @ref le_sup_ctrl_interface.h "API Reference"
 *
 * THIS API IS DEPRECATED, use le_appCtrl.api and le_framework.api instead.
 *
 * Supervisor API for controlling the framework and applications. This API is only available to
 * privileged users.
 *
 * @section legatoServicesSupervisor_binding Binding
 *
 * You can use a definition @c .adef file to bind your client-side app and component to the
 * server-side Supervisor Control service.
 *
 * This code sample shows how to bind an app to this service:
 * @code
 * bindings
 * {
 *     myExe.myComp.le_sup_ctrl -> <root>.le_sup_ctrl
 * }
 * @endcode
 *
 * See @ref defFilesAdef for details.
 *
 * @section legatoServicesSupervisor_start Start App
 *
 * Use le_sup_ctrl_StartApp() (const char * appName) to automatically start an app.
 *
 * The code sample shows how to use the Supervisor Control service to start an app:
 *
 * @code
 *  le_result_t result = le_sup_ctrl_StartApp("myApp");
 * @endcode
 *
 * where @c myApp is the name of the app.
 *
 * @section legatoServicesSupervisor_stop Stop App
 *
 * Use le_sup_ctrl_StopApp() to automatically stop an app.
 *
 * This code sample shows how to use the Supervisor Control service to stop an app, where
 * appAplication.app is your app's actual name:
 *
 * @code
 * le_result_t result = le_sup_ctrl_StopApp("myApp");
 * @endcode
 *
 * where @c myApp is the name of the app.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_sup_ctrl_interface.h
 *
 * Legato @ref c_sup_ctrl include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


USETYPES le_limit.api;


REFERENCE App;


//--------------------------------------------------------------------------------------------------
/**
 * Gets a reference to an application.
 *
 * @return
 *      Reference to the named app.
 *      NULL if the app is not installed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION App GetAppRef
(
    string appName[le_limit.APP_NAME_LEN] IN    ///< Name of the app to get the ref for.
);


//--------------------------------------------------------------------------------------------------
/**
 * Release the reference to an application.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ReleaseAppRef
(
    App appRef IN   ///< Ref to the app.
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets the run flag for a process in an application.
 *
 * If there is an error this function will kill the calling client.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION SetRun
(
    App appRef IN,                              ///< Ref to the app.
    string procName[le_limit.PROC_NAME_LEN] IN, ///< Process name to set the run flag for.
    bool run IN                                 ///< Flag to run the process or not.
);


//--------------------------------------------------------------------------------------------------
/**
 * Starts an app.
 *
 * @return
 *      LE_OK if the app is successfully started.
 *      LE_DUPLICATE if the app is already running.
 *      LE_NOT_FOUND if the app isn't installed.
 *      LE_FAULT if there was an error and the app could not be launched.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartApp
(
    string appName[le_limit.APP_NAME_LEN] IN        ///< Name of the app to start.
);


//--------------------------------------------------------------------------------------------------
/**
 * Stops an app.
 *
 * @return
 *      LE_OK if successful.
 *      LE_NOT_FOUND if the app could not be found.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StopApp
(
    string appName[le_limit.APP_NAME_LEN] IN        ///< Name of the app to stop.
);


//--------------------------------------------------------------------------------------------------
/**
 * Stops the Legato framework.
 *
 * @return
 *      LE_OK if successful.
 *      LE_DUPLICATE if the framework is in the process of shutting down (perhaps someone else has
 *                   already requested the framework be stopped or restarted).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StopLegato
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Restarts the Legato framework.
 *
 * @return
 *      LE_OK if the request was accepted and the restart procedure has begun.
 *      LE_DUPLICATE if the framework is already in the process of shutting down (perhaps someone
 *                   else has already requested the framework be stopped or restarted).
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RestartLegato
(
    bool manualRestart IN           ///< Was the restart manually triggered e.g. "legato restart"
);
