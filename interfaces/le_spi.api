//--------------------------------------------------------------------------------------------------
/**
 * @page c_spi SPI
 *
 * @ref le_spi_interface.h "API Reference" <br>
 * @subpage howToSPI "How To Setup SPI" <br>
 * @ref yoctoOutofTreeKernelModule
 *
 * <HR>
 *
 * @section spi_overview Overview
 *
 * This API is used by apps to control a Serial Peripheral Interface (SPI).
 *
 * The SPI API is configured as a four wire interface:
 * - Clock - Serial Clock
 * - MOSI - Master Output
 * - MISO - Master Input
 * - SS or CS - Chip select
 *
 * @section spi_usage Usage
 *
 * The sample code in this section shows how to use the SPI API for a user space app.
 *
 * Handle for passing to related functions to access the SPI device:
 * @code
 * le_spi_DeviceHandleRef_t spiHandle;
 * @endcode
 *
 * le_spi_Open() opens the @c spi file handle:
 * @code
 * le_result_t res;
 * res = le_spi_Open("spidev0.0", &spiHandle);
 * LE_FATAL_IF(res != LE_OK, "le_spi_Open failed with result=%s", LE_RESULT_TXT(res));
 * @endcode
 *
 * le_spi_Configure() initializes all the parameters on the master side based on the
 * implementation below uses mode = 0, 8 bit data, 960kbps and MSB first:
 * @code
 * le_spi_Configure(spiHandle, 0, 8, 960000, 0);
 * @endcode
 *
 * le_spi_WriteHD() writes data to slave device in half-duplex mode:
 * write_buffer_tx is an array. Example defined below:
 * @code
 * uinti8_t write_buffer_tx[] ={0xC7, 0x94, 0x80, 0x9A};
 * le_result_t res;
 * res = le_spi_WriteHD(spiHandle, write_buffer_tx, NUM_ARRAY_MEMBERS(write_buffer_tx));
 * LE_FATAL_IF(res != LE_OK, "le_spi_WriteHD failed with result=%s", LE_RESULT_TXT(res));
 * @endcode
 *
 * le_spi_WriteReadHD() writes and reads to/from slave device in half-duplex mode:
 * @code
 * le_result_t res;
 * le_spi_WriteReadHD(spiHandle, read_ID_tx, NUM_ARRAY_MEMBERS(read_ID_tx), ID_rx,
 *                    &readBufferSize);
 * LE_FATAL_IF(res != LE_OK, "le_spi_WriteReadHD failed with result=%s", LE_RESULT_TXT(res));
 * @endcode
 * read_ID_tx is an array that is transmitted to the device. ID_rx is a buffer reserved for
 * data received from  the device.
 *
 * le_spi_WriteReadFD() writes and reads to/from slave in full-duplex mode:
 * @code
 * le_result_t res;
 * res = le_spi_WriteReadHD(spiHandle, read_buffer_tx, read_rx, NUM_ARRAY_MEMBERS(read_buffer_tx);
 * LE_FATAL_IF(res != LE_OK, "le_spi_WriteReadHD failed with result=%s", LE_RESULT_TXT(res));
 * @endcode
 * read_buffer_tx is an array transmitted to the device. read_rx is a buffer reserved for
 * data received from the device. Buffer size for tx and rx must be the same.
 *
 * le_spi_Close() closes the spi handle:
 * @code
 * le_spi_Close(spiHandle);
 * @endcode
 *
 * @section spi_kernel_dep Kernel module dependency
 *
 * SPI Service has a build time dependency on the spisvc.ko kernel module for the subset of
 * targets on which the feature is currently supported (currently, WP76, WP77, WP75, WP85).
 * That means, spiService.adef file and default.sdef file both include kernelModules section
 * that lists spisvc.mdef as a dependency.
 * @note If the users is building their own configuration, extra attention has to be paid to
 * preserve this logic, i.e. retain the build-time dependency and avoid duplicated inclusion of
 * the spisvc.mdef (which may cause build errors).
 *
 * @section spi_scripts Automatic installation/removal of the kernel modules
 *
 * SPI service is started manually, i.e. it is not running by default. When the user starts
 * spiService, the install.sh scripts takes care of loading both "spidev" and "spisvc" kernel
 * modules.
 * Conversely, when spiService is stopped, the remove.sh script uloads both kernel modules.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_spi_interface.h
 *
 * Legato @ref c_le_spi include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Max byte storage size for write buffer
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_WRITE_SIZE = 1024;

//--------------------------------------------------------------------------------------------------
/**
 * Max byte storage size for read buffer
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_READ_SIZE  = 1024;

//--------------------------------------------------------------------------------------------------
/**
 * Handle for passing to related functions to access the SPI device
 */
//--------------------------------------------------------------------------------------------------
REFERENCE DeviceHandle;

//--------------------------------------------------------------------------------------------------
/**
 * Opens an SPI device so that the attached device may be accessed.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if the device name string is bad
 *      - LE_NOT_FOUND if the SPI device file could not be found
 *      - LE_NOT_PERMITTED if the SPI device file can't be opened for read/write
 *      - LE_DUPLICATE if the given device file is already opened by another spiService client
 *      - LE_FAULT for non-specific failures
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Open
(
    string deviceName [128] IN,  ///< Handle for the SPI master to open
    DeviceHandle handle OUT      ///< Handle for passing to related functions in order to
                                 ///< access the SPI device
);

//--------------------------------------------------------------------------------------------------
/**
 * Closes the device associated with the given handle and frees the associated resources.
 *
 * @note
 *      Once a handle is closed, it's not permitted to use it for future SPI access without first
 *      calling Open.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Close
(
    DeviceHandle handle IN  ///< Handle for the SPI master to close
);

//--------------------------------------------------------------------------------------------------
/**
 * Configures an SPI device's data sample settings. The required values should be
 * included in your target's datasheet. Most common @c Mode values are
 * @c 0 and @c 3.
 *
 * These are the SPI Mode options:
 * |   Mode  |   Clock Polarity   |  Clock Phase   |   Clock Edge   |
 * | :-----: | :----------------: | :------------: | :------------: |
 * |   0     |       0            |   0            |    1           |
 * |   1     |       0            |   1            |    0           |
 * |   2     |       1            |   0            |    1           |
 * |   3     |       1            |   1            |    0           |
 *
 * @note
 *      This function should be called before any of the Read/Write functions to ensure
 *      the SPI bus configuration is in a known state.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Configure
(
    DeviceHandle handle IN,  ///< Handle for the SPI master to configure
    int32 mode IN,  ///< Choose mode options for the bus per above table
    uint8 bits IN,  ///< bits per word, typically 8 bits per word
    uint32 speed IN,  ///< max speed (Hz), this is slave dependant
    int32 msb IN    ///< set as 0 for MSB as first bit or 1 for LSB as first bit
);

//--------------------------------------------------------------------------------------------------
/**
 * Performs SPI WriteRead Half Duplex. You can send send Read command/ address of data to read.
 *
 * @return
 *      LE_OK on success or LE_FAULT on failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t WriteReadHD
(
    DeviceHandle handle IN,  ///< Handle for the SPI master to perform the write-read on
    uint8 writeData [MAX_WRITE_SIZE] IN, ///< TX command/address being sent to slave with size
    uint8 readData  [MAX_READ_SIZE] OUT ///< RX response from slave with number of bytes reserved
                                        ///< on master
);

//--------------------------------------------------------------------------------------------------
/**
 * SPI Write for Half Duplex Communication
 *
 * @return
 *      LE_OK on success or LE_FAULT on failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t WriteHD
(
    DeviceHandle handle IN,  ///< Handle for the SPI master to perform the write on
    uint8 writeData [MAX_WRITE_SIZE] IN  ///< TX command/address being sent to slave with size
);

//--------------------------------------------------------------------------------------------------
/**
 * SPI Read for Half Duplex Communication
 *
 * @return
 *      LE_OK on success or LE_FAULT on failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ReadHD
(
    DeviceHandle handle IN,  ///< Handle for the SPI master to perform the read from
    uint8 readData [MAX_READ_SIZE] OUT  ///< RX response from slave with number of bytes reserved
                                        ///<  on master
);

//--------------------------------------------------------------------------------------------------
/**
 * Simultaneous SPI Write and  Read for full duplex communication
 *
 * @return
 *      LE_OK on success or LE_FAULT on failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t WriteReadFD
(
    DeviceHandle handle IN,   ///< Handle for the SPI master to perform full duplex write-read on
    uint8 writeData [MAX_WRITE_SIZE] IN, ///< TX command/address being sent to slave with size
    uint8 readData  [MAX_WRITE_SIZE] OUT ///< RX response from slave with same buffer size as TX
);
