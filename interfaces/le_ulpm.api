//--------------------------------------------------------------------------------------------------
/**
 * @page c_ulpm Ultra Low Power Mode
 *
 * @ref le_ulpm_interface.h "API Reference"
 *
 * <HR>
 *
 * This API is used to set the boot sources and switch the device to ultra-low power state. Ultra-
 * low power mode is achieved by shutting down major components (e.g. app processor, modem, etc.)
 * while keeping an ultra-low power component alive. This ultra-low power component is used to
 * monitor boot sources that are set before switching to ultra-low power mode.
 *
 * @section API_Usage_usage Typical Usage
 *
 * Typically, this API is used like this:
 *
 *   - Boot sources are set by calling le_ulpm_BootOnGpio()/le_ulpm_BootOnTimer(). If multiple
 *      boot sources are configured, the module will boot if any of the boot sources are triggered.
 *
 *   - After configuring boot source, le_ulpm_ShutDown() can be called to initiate shutdown
 *      (i.e. shutt down all major components like the app processor, modem, etc.).
 *
 * @section ulpm_example Sample Code
 *
 * This C code sample calls low power manager API to switch low power mode:
 *
 *  @code
 *
 *  void SwitchToLowPowerMode
 *  (
 *      void
 *  )
 *  {
 *      char version[LE_ULPM_MAX_VERS_LEN+1];
 *
 *      // Get ultra low power manager firmware version
 *      LE_FATAL_IF(le_ulpm_GetFirmwareVersion(version, sizeof(version)) != LE_OK,
 *          "Failed to get ultra low power firmware version");
 *
 *       LE_INFO("Ultra Low Power Manager Firmware version: %s", version);
 *
 *      // Boot after 1000 second of shutdown.
 *      LE_ERROR_IF(le_ulpm_BootOnTimer(1000) != LE_OK, "Can't set timer as boot source");
 *
 *      // Boot if GPIO36 voltage level is high.
 *      LE_ERROR_IF(le_ulpm_BootOnGpio(36, LE_ULPM_GPIO_HIGH) != LE_OK, "Can't set gpio36 as boot source");
 *
 *      // Boot if GPIO38 voltage level is low.
 *      LE_ERROR_IF(le_ulpm_BootOnGpio(38, LE_ULPM_GPIO_LOW) != LE_OK, "Can't set gpio38 as boot source");
 *
 *      // Initiate shutdown.
 *      LE_ERROR_IF(le_ulpm_ShutDown() != LE_OK, "Can't initiate shutdown");
 *  }
 *
 *  @endcode
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * @file le_ulpm_interface.h
 *
 * Legato @ref c_ulpm include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Maximum version length of mcu firmware.
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_VERS_LEN = 8;


//--------------------------------------------------------------------------------------------------
/**
 * State of gpio pin. This state will be used to exit from low power state.
 */
//--------------------------------------------------------------------------------------------------
ENUM GpioState
{
    GPIO_LOW,              ///< Gpio voltage level low.
    GPIO_HIGH,             ///< Gpio voltage level high.
    GPIO_RISING,           ///< Gpio edge rising.
    GPIO_FALLING,          ///< Gpio edge falling.
    GPIO_BOTH,             ///< Gpio edge either rising or falling.
    GPIO_OFF,              ///< Gpio off.
};


//--------------------------------------------------------------------------------------------------
/**
 * Configure the system to boot based on a state change of a given GPIO.
 *
 * @return
 *      - LE_OK if specified gpio is configured as boot source.
 *      - LE_NOT_PERMITTED if the process lacks sufficient permissions to configure the GPIO as a
 *        boot source.
 *      - LE_UNSUPPORTED if the device lacks the ability to boot based on the given GPIO.
 *      - LE_BAD_PARAMETER if the state parameter was rejected.
 *      - LE_FAULT if there is a non-specific failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t BootOnGpio
(
    uint32 gpioNum IN,       ///< Gpio number to boot.
    GpioState state IN       ///< State which should cause boot.
);


//--------------------------------------------------------------------------------------------------
/**
 * Boot after expiration of timer interval.
 *
 * @return
 *      - LE_OK if timer is configured as boot source.
 *      - LE_NOT_PERMITTED if the process lacks sufficient permissions to configure the timer as a
 *        boot source.
 *      - LE_UNSUPPORTED if the device lacks the ability to boot based on a timer.
 *      - LE_BAD_PARAMETER if the state parameter was rejected.
 *      - LE_FAULT if there is a non-specific failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t BootOnTimer
(
    uint32 expiryVal IN       ///< Expiration time(in second) to boot. This is relative time from
                              ///< modem/app processor shutdown.
);


//--------------------------------------------------------------------------------------------------
/**
 * Configure and enable an ADC as a boot source.
 *
 * It is possible to specify a single range of operation or two ranges of operation with a
 * non-operational range in between.  When bootAboveAdcReading is less than bootBelowAdcReading,
 * then a single range bootAboveReading to bootBelowReading is the configured operational range.
 * However if bootAboveAdcReading is greater than bootBelowAdcReading, then there are two
 * operational ranges.  The first is any reading less than bootBelowAdcReading and the second is any
 * reading greater than bootAboveAdcReading.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_PERMITTED if the process lacks sufficient permissions to configure the adc as a
 *        boot source.
 *      - LE_OVERFLOW if the provided bootAboveAdcReading or bootBelowAdcReading are too large to
 *        convert to fit in the internal string buffer.
 *      - LE_BAD_PARAMETER if the pollIntervalInMs, bootAboveAdcReading or bootBelowAdcReading
 *        parameter were rejected.
 *      - LE_UNSUPPORTED if the device does not support using the given adc as a boot source.
 *      - LE_FAULT if there is a non-specific failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t BootOnAdc
(
    uint32 adcNum IN,              ///< Number of the ADC to configure
    uint32 pollIntervalInMs IN,    ///< How frequently to poll the ADC while sleeping
    double bootAboveAdcReading IN, ///< Reading above which the system should boot
    double bootBelowAdcReading IN  ///< Reading below which the system should boot
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the ultra low power manager firmware version.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if version string to big to fit in provided buffer
 *      - LE_FAULT for any other errors
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFirmwareVersion
(
    string version[MAX_VERS_LEN] OUT     ///< Firmware version string
);


//--------------------------------------------------------------------------------------------------
/**
 * Initiate shutting down of app processor/modem etc.
 *
 * @return
 *      - LE_OK if entry to ultra low power mode initiates properly.
 *      - LE_NOT_POSSIBLE if shutting is not possible now. Try again.
 *      - LE_NOT_PERMITTED if the process lacks sufficient permissions to perform a shutdown.
 *      - LE_UNSUPPORTED if the device lacks the ability to shutdown via ULPM.
 *      - LE_FAULT if there is a non-specific failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ShutDown();
