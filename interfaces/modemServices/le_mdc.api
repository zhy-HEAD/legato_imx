//--------------------------------------------------------------------------------------------------
/**
 * @page c_mdc Modem Data Control
 *
 * @ref le_mdc_interface.h "API Reference"
 *
 * <HR>
 *
 * A data session is useful for  applications that need to send or receive data over a network
 * where SMS messages are insufficient.  To start a data session, a data profile must
 * be configured as specified by the target network.
 *
 * The Modem Data Control (mdc) API is used to manage data profiles and data sessions.
 *
 * @section le_mdc_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b modemService service.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_mdc -> modemService.le_mdc
   }
   @endverbatim
 *
 * @section le_mdc_profile Data Profiles
 *
 * If a pre-defined data profile has been configured then this profile can
 * be loaded using le_mdc_GetProfile().
 * le_mdc_GetProfile() must be called with @c LE_MDC_DEFAULT_PROFILE to retrieve the default index
 * used by the modem for data connection.
 * le_mdc_GetProfile() must be called with @c LE_MDC_SIMTOOLKIT_BIP_DEFAULT_PROFILE to retrieve the
 * default index used by the modem for Bearer Independent Protocol (BIP).
 * The maximum number of data profiles supported is modem dependent and can be retrieved with
 * le_mdc_NumProfiles().
 *
 * @note le_mdc_GetProfile() creates a new profile if the profile's index can't be found.
 *
 * @warning 0 is not a valid index.

 * A pre-defined data profile can be retrieved using le_mdc_GetProfileFromApn() thanks to its
 * APN.
 *
 * A default APN can be set for a defined profile with le_mdc_SetDefaultAPN(), based on the SIM
 * identification number (ICCID). If no match is found in the database using the ICCID, the search
 * falls back on the home network (MCC/MNC) to determine the default APN.
 *
 * @warning Ensure to check the list of supported data profiles for your specific platform.
 *
 * The following data profile parameters can be retrieved:
 *  - Packet Data Protocol using le_mdc_GetPDP().
 *  - Access Point Name using le_mdc_GetAPN().
 *  - Authentication settings using le_mdc_GetAuthentication().
 *
 * The following data profile parameters can be set:
 *  - Packet Data Protocol using le_mdc_SetPDP().
 *  - Access Point Name using le_mdc_SetAPN().
 *  - Authentication settings using le_mdc_SetAuthentication().
 *
 * @warning The maximum APN length might be limited by the platform.
 *          Please refer to the platform documentation.
 *
 *  A sample code can be seen in the following page:
 * - @subpage c_mdcDataProfiles
 *
 * @section le_mdc_session Data Sessions
 *
 * @subsection le_mdc_session_MO Mobile Originated (MO-PDP context activation)
 *
 * le_mdc_MapProfileOnNetworkInterface() may be used to map a data session with a network interface.
 * To take effect, this API has to be called before starting the data session. Otherwise, the
 * mapping will be taken into account at the next start of the data profile.
 *
 * A data session can be started using le_mdc_StartSession(). To start a data session, a
 * data profile must be created and written to the modem, or  an existing data profile
 * can be used. A data session can be stopped using le_mdc_StopSession(). The number of
 * simultaneous data sessions supported is dependent on the modem, but cannot be more than the
 * maximum number of supported profiles.
 *
 * A data session can be started using le_mdc_StartSessionAsync() and stopped using
 * le_mdc_StopSessionAsync(). These functions are not blocking. The response will be returned
 * with the @c le_mdc_SessionHandlerFunc_t handler function.
 *
 * The current state of a data session can be queried using le_mdc_GetSessionState(). An application
 * can also a register handler to be notified when the session state changes. The handler
 * can be managed using le_mdc_AddSessionStateHandler() and le_mdc_RemoveSessionStateHandler().
 *
 * @subsection le_mdc_session_MT Mobile Terminated (MT-PDP context activation)
 * To be notified by the MT-PDP context request, the application has to subscribe to the state
 * handler using le_mdc_AddMtPdpSessionStateHandler().
 * When the incoming MT-PDP context request is notified,
 * the application takes responsibility to trigger the data session for that MT PDP request using
 * le_mdc_StartSession(). That data session can be stopped using le_mdc_StopSession().
 *
 * The network interface settings of that MT-PDP context can be retrieved using the provided
 * Data Profile.
 * Please refer to @ref le_mdc_session_networkItf.
 *
 * A data session can be rejected using le_mdc_RejectMtPdpSession().
 * The number of simultaneous data sessions supported is dependent on the modem,
 * but cannot be more than the maximum number of supported profiles.
 *
 * The handler can be released using le_mdc_RemoveMtPdpSessionStateHandler().
 *
 * @warning The MT-PDP context activation feature is not supported on all platforms. Please refer to
 * @ref MT-PDP_context section for full details.
 *
 * @subsection le_mdc_session_networkItf Network interface settings
 * Once a data session starts, a Linux network interface is created.  It's the application's
 * responsibility to configure the network interface, usually through a DHCP client. Query the
 * interface name using le_mdc_GetInterfaceName(). The IP Preference can be checked with
 * le_mdc_IsIPv4() or le_mdc_IsIPv6() when the profile is connected. The IP address for the
 * current data session
 * can be retrieved by  le_mdc_GetIPv4Address() or le_mdc_GetIPv6Address(). The Gateway and
 * DNS
 * addresses can be retrieved using le_mdc_GetIPv4GatewayAddress(),
 * le_mdc_GetIPv4DNSAddresses() or le_mdc_GetIPv6GatewayAddress(), le_mdc_GetIPv6DNSAddresses().
 * The Access Point Name can be retrieved by le_mdc_GetAPN(). The Data bearer
 * Technology can be retrieved by le_mdc_GetDataBearerTechnology().
 *
 * le_mdc_GetDisconnectionReason() or le_mdc_GetPlatformSpecificDisconnectionCode() let you get
 * the reason for disconnection of data session by retrieving the call end failure code
 * from @c le_mdc_ProfileRef_t.
 *
 * le_mdc_GetPlatformSpecificFailureConnectionReason() let you get the data session connection
 * failure reason by retrieving the  call connection failure code and type from
 * @c le_mdc_ProfileRef_t.
 *
 * Please refer to @ref platformConstraintsSpecificErrorCodes for platform specific
 * disconnection code description.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mdcDataSessions
 *
 * The following extended functions should be used to get the disconnection reason instead.
 * A pdpType parameter is required to specify which session's(IPv4 or IPv6 session) disconnect
 * reason to get for IPv4v6 mode. For IPv4 and IPv6 mode, the pdpType is ignored because there
 * is only one session.
 * - le_mdc_GetDisconnectionReasonExt()
 * - le_mdc_GetPlatformSpecificDisconnectionCodeExt()
 * - le_mdc_GetPlatformSpecificFailureConnectionReasonExt()
 *
 * @section le_mdc_dataStatistics Data Statistics
 *
 * The amount of received and transmitted data can be retrieved through le_mdc_GetBytesCounters().
 * The returned values correspond to the number of received and transmitted
 * bytes since the last call to le_mdc_ResetBytesCounter().
 *
 * The data statistics collection can be enabled with le_mdc_StartBytesCounter() and disabled
 * without resetting the counters with le_mdc_StopBytesCounter().
 *
 * @note The data statistics collection activation and the data counters are persistent even after
 * a reboot of the platform.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mdcDataStatistics
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

/**
 * @page c_mdcDataProfiles Sample code for Data Profiles
 *
 * @snippet "apps/test/modemServices/mdc/mdcIntegrationTest/mdcTestComp/mdcTest.c" Profiles
 */
/**
 * @page c_mdcDataSessions Sample code for network interface settings
 *
 * @snippet "apps/test/modemServices/mdc/mdcIntegrationTest/mdcTestComp/mdcTest.c" Sessions
 */
/**
 * @page c_mdcDataStatistics Sample code for Data Statistics
 *
 * @snippet "apps/test/modemServices/mdc/mdcIntegrationTest/mdcTestComp/mdcTest.c" Statistics
 */

//--------------------------------------------------------------------------------------------------
/**
 * @file le_mdc_interface.h
 *
 * Legato @ref c_mdc include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

// NOTE: string sizes are set to an arbitrary value.  The correct values
//       still need to be filled in.

/**
 * Maximum number of bytes in a interface name (not including the null-terminator).
 */
DEFINE  INTERFACE_NAME_MAX_LEN = 20;

/**
 * Maximum number of bytes in a profile name (including the null-terminator).
 */
DEFINE  INTERFACE_NAME_MAX_BYTES = (INTERFACE_NAME_MAX_LEN + 1);

/**
 * Maximum number of bytes in an IPv4 address (not including the null-terminator).
 */
DEFINE  IPV4_ADDR_MAX_LEN = 15;

/**
 * Maximum number of bytes in an IPv4 address (including the null-terminator).
 */
DEFINE  IPV4_ADDR_MAX_BYTES = (IPV4_ADDR_MAX_LEN + 1);

/**
 * Maximum number of bytes in an IPv6 address (not including the null-terminator).
 */
DEFINE  IPV6_ADDR_MAX_LEN = 45;

/**
 * Maximum number of bytes in an IPv6 address (including the null-terminator).
 */
DEFINE  IPV6_ADDR_MAX_BYTES = (IPV6_ADDR_MAX_LEN + 1);

/**
 * Maximum number of bytes in a apn name (not including the null-terminator).
 */
DEFINE  APN_NAME_MAX_LEN = 100;

/**
 * Maximum number of bytes in a apn name (including the null-terminator).
 */
DEFINE  APN_NAME_MAX_BYTES = (APN_NAME_MAX_LEN + 1);

/**
 * Maximum number of bytes in a user name (not including the null-terminator).
 */
DEFINE  USER_NAME_MAX_LEN = 64;

/**
 * Maximum number of bytes in a user name (including the null-terminator).
 */
DEFINE  USER_NAME_MAX_BYTES  = (USER_NAME_MAX_LEN + 1);

/**
 * Maximum number of bytes in a password name (not including the null-terminator).
 */
DEFINE  PASSWORD_NAME_MAX_LEN = 100;

/**
 * Maximum number of bytes in a password name (including the null-terminator).
 */
DEFINE  PASSWORD_NAME_MAX_BYTES  = (PASSWORD_NAME_MAX_LEN + 1);

/**
 * Default profile definition.
 */
DEFINE DEFAULT_PROFILE = -1;

/**
 * Default profile definition for Bearer Independent Protocol (BIP).
 */
DEFINE SIMTOOLKIT_BIP_DEFAULT_PROFILE = -2;

/**
 * @deprecated LE_MDC_DISC_USER_AUTHENTIFICATION_FAILURE is deprecated.
 * LE_MDC_DISC_USER_AUTHENTICATION_FAILURE should be used instead.
 */
DEFINE DISC_USER_AUTHENTIFICATION_FAILURE = 7;


/**
 * Define the max # of entries in a cellular profile list. So far most of the supported modules
 * & platforms have a limit of 24 profiles, while on 9x50 Qualcomm on the EM75xx baseline it has
 * been increased to 34. It's unforeseeable that in the short future this limit will further be
 * raised beyond this level.
 */
DEFINE PROFILE_LIST_ENTRY_MAX = 36;
DEFINE PROFILE_LIST_ENTRY_NAMELEN_MAX = 50;

//--------------------------------------------------------------------------------------------------
/**
 * Reference to a modem data connection profile.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Profile;

//--------------------------------------------------------------------------------------------------
/**
 * Enumeration of data bearer technologies.
 */
//--------------------------------------------------------------------------------------------------
ENUM DataBearerTechnology
{
    DATA_BEARER_TECHNOLOGY_UNKNOWN,               ///< Unknown
    DATA_BEARER_TECHNOLOGY_GSM,                   ///< GSM
    DATA_BEARER_TECHNOLOGY_GPRS,                  ///< GPRS
    DATA_BEARER_TECHNOLOGY_EGPRS,                 ///< Enhanced GPRS (EDGE)
    DATA_BEARER_TECHNOLOGY_WCDMA,                 ///< WCDMA (UMTS)
    DATA_BEARER_TECHNOLOGY_HSPA,                  ///< HSPA
    DATA_BEARER_TECHNOLOGY_HSPA_PLUS,             ///< HSPA+
    DATA_BEARER_TECHNOLOGY_DC_HSPA_PLUS,          ///< Dual Cell - HSPA+
    DATA_BEARER_TECHNOLOGY_HSDPA,                 ///< HSDPA
    DATA_BEARER_TECHNOLOGY_HSUPA,                 ///< HSUPA
    DATA_BEARER_TECHNOLOGY_DC_HSUPA,              ///< Dual Cell - HSUPA
    DATA_BEARER_TECHNOLOGY_DC_HSPA,               ///< Dual Cell - HSPA
    DATA_BEARER_TECHNOLOGY_LTE,                   ///< LTE
    DATA_BEARER_TECHNOLOGY_LTE_FDD,               ///< LTE FDD
    DATA_BEARER_TECHNOLOGY_LTE_TDD,               ///< LTE TDD
    DATA_BEARER_TECHNOLOGY_LTE_CA_DL,             ///< LTE CA DL
    DATA_BEARER_TECHNOLOGY_LTE_CA_UL,             ///< LTE CA UL
    DATA_BEARER_TECHNOLOGY_TD_SCDMA,              ///< TD-SCDMA
    DATA_BEARER_TECHNOLOGY_CDMA2000_1X,           ///< CDMA2000 1X
    DATA_BEARER_TECHNOLOGY_CDMA2000_EVDO,         ///< CDMA2000 HRPD (1xEV-DO)
    DATA_BEARER_TECHNOLOGY_CDMA2000_EVDO_REVA,    ///< CDMA2000 HRPD (1xEV-DO RevA)
    DATA_BEARER_TECHNOLOGY_CDMA2000_EHRPD,        ///< CDMA2000 EHRPD
    DATA_BEARER_TECHNOLOGY_IS95_1X,               ///< IS95 1X
    DATA_BEARER_TECHNOLOGY_HDR_REV0_DPA,          ///< HDR REV0 DPA
    DATA_BEARER_TECHNOLOGY_HDR_REVA_DPA,          ///< HDR REVA DPA
    DATA_BEARER_TECHNOLOGY_HDR_REVB_DPA,          ///< HDR REVB DPA
    DATA_BEARER_TECHNOLOGY_HDR_REVA_MPA,          ///< HDR REVA MPA
    DATA_BEARER_TECHNOLOGY_HDR_REVB_MPA,          ///< HDR REVB MPA
    DATA_BEARER_TECHNOLOGY_HDR_REVA_EMPA,         ///< HDR REVA EMPA
    DATA_BEARER_TECHNOLOGY_HDR_REVB_EMPA,         ///< HDR REVB EMPA
    DATA_BEARER_TECHNOLOGY_HDR_REVB_MMPA,         ///< HDR REVB MMPA
    DATA_BEARER_TECHNOLOGY_HDR_EVDO_FMC,          ///< HDR EVDO FMC
    DATA_BEARER_TECHNOLOGY_64_QAM,                ///< 64 QAM
    DATA_BEARER_TECHNOLOGY_S2B                    ///< S2B
};


//--------------------------------------------------------------------------------------------------
/**
 * Enumeration of Packet Data Protocol.
 */
//--------------------------------------------------------------------------------------------------
ENUM Pdp
{
    PDP_UNKNOWN,    ///< Unknown
    PDP_IPV4,       ///< IPv4
    PDP_IPV6,       ///< IPv6
    PDP_IPV4V6      ///< IPv4 and IPv6
};


//--------------------------------------------------------------------------------------------------
/**
 * Authentication bit mask.
 */
//--------------------------------------------------------------------------------------------------
BITMASK Auth
{
    AUTH_NONE,    ///< no authentication
    AUTH_PAP,     ///< PAP protocol
    AUTH_CHAP     ///< CHAP protocol
};

//--------------------------------------------------------------------------------------------------
/**
 * Enumeration of connection state.
 */
//--------------------------------------------------------------------------------------------------
ENUM ConState
{
    DISCONNECTED,      ///< Data session is disconnected
    AUTHENTICATING,    ///< Authenticating data session
    CONNECTED,         ///< Data session is connected
    SUSPENDING,        ///< Suspending data session
    INCOMING           ///< Incoming data session (MT-PDP context request)
};

//--------------------------------------------------------------------------------------------------
/**
 *  Enumeration of the possible reasons for the disconnection.
 */
//--------------------------------------------------------------------------------------------------
ENUM DisconnectionReason
{
    DISC_NO_SERVICE,                                        ///< Modem has no service
    DISC_OPERATOR_DETERMINED_BARRING,                       ///< cf. 3GPP 24.008 Annex I1
    DISC_INSUFFICIENT_MBMS_CAPABILITIES,                    ///< cf. 3GPP 24.008 Annex I1
    DISC_LLC_SNDCP_FAILURE,                                 ///< cf. 3GPP 24.008 Annex I1
    DISC_INSUFFICIENT_RESOURCES,                            ///< cf. 3GPP 24.008 Annex I1
    DISC_MISSING_OR_UNKNOWN_APN,                            ///< cf. 3GPP 24.008 Annex I1
    DISC_UNKNOWN_PDP_ADDR_OR_TYPE,                          ///< cf. 3GPP 24.008 Annex I1
    DISC_USER_AUTHENTICATION_FAILURE,                       ///< cf. 3GPP 24.008 Annex I1
    DISC_ACTIVATION_REJECTED_BY_GGSN_OR_GW,                 ///< cf. 3GPP 24.008 Annex I1
    DISC_ACTIVATION_REJECTED_UNSPECIFIED,                   ///< cf. 3GPP 24.008 Annex I1
    DISC_SERVICE_OPTION_NOT_SUPPORTED,                      ///< cf. 3GPP 24.008 Annex I1
    DISC_REQUESTED_SERVICE_OPTION_UNSUBSCRIBED,             ///< cf. 3GPP 24.008 Annex I1
    DISC_REQUESTED_SERVICE_OPTION_OUT_OF_ORDER,             ///< cf. 3GPP 24.008 Annex I1
    DISC_NSAPI_ALREADY_USED,                                ///< cf. 3GPP 24.008 Annex I1
    DISC_REGULAR_DEACTIVATION,                              ///< cf. 3GPP 24.008 Annex I1
    DISC_QOS_NOT_ACCEPTED,                                  ///< cf. 3GPP 24.008 Annex I1
    DISC_NETWORK_FAILURE,                                   ///< cf. 3GPP 24.008 Annex I1
    DISC_REACTIVATION_REQUESTED,                            ///< cf. 3GPP 24.008 Annex I1
    DISC_FEATURE_NOT_SUPPORTED,                             ///< cf. 3GPP 24.008 Annex I1
    DISC_TFT_SEMANTIC_ERROR,                                ///< cf. 3GPP 24.008 Annex I1
    DISC_TFT_SYNTACTICAL_ERROR,                             ///< cf. 3GPP 24.008 Annex I1
    DISC_UNKNOWN_PDP_CONTEXT,                               ///< cf. 3GPP 24.008 Annex I1
    DISC_PACKET_FILTER_SEMANTIC_ERROR,                      ///< cf. 3GPP 24.008 Annex I1
    DISC_PACKET_FILTER_SYNTACTICAL_ERROR,                   ///< cf. 3GPP 24.008 Annex I1
    DISC_PDP_CONTEXT_WITHOUT_ACTIVE_TFT,                    ///< cf. 3GPP 24.008 Annex I1
    DISC_MULTICAST_TIME_OUT,                                ///< cf. 3GPP 24.008 Annex I1
    DISC_BEARER_CONTROL_MODE_VIOLATION,                     ///< cf. 3GPP 24.008 Annex I1
    DISC_IPV4_ONLY_ALLOWED,                                 ///< cf. 3GPP 24.008 Annex I1
    DISC_IPV6_ONLY_ALLOWED,                                 ///< cf. 3GPP 24.008 Annex I1
    DISC_SINGLE_ADDR_ONLY_ALLOWED,                          ///< cf. 3GPP 24.008 Annex I1
    DISC_COLLISION_WITH_NETWORK_INITIATED_REQ,              ///< cf. 3GPP 24.008 Annex I1
    DISC_BEARER_HANDLING_UNSUPPORTED,                       ///< cf. 3GPP 24.008 Annex I1
    DISC_MAX_PDP_CONTEXTS,                                  ///< cf. 3GPP 24.008 Annex I1
    DISC_APN_UNSUPPORTED_FOR_RAT_AND_PLMN,                  ///< cf. 3GPP 24.008 Annex I1
    DISC_INCOMPATIBLE_APN,                                  ///< cf. 3GPP 24.008 Annex I1
    DISC_INVALID_TRANSACTION_ID,                            ///< cf. 3GPP 24.008 Annex I2
    DISC_MESSAGE_INCORRECT_SEMANTIC,                        ///< cf. 3GPP 24.008 Annex I2
    DISC_INVALID_MANDATORY_INFORMATION,                     ///< cf. 3GPP 24.008 Annex I2
    DISC_UNSUPPORTED_MESSAGE_TYPE,                          ///< cf. 3GPP 24.008 Annex I2
    DISC_MESSAGE_AND_PROTOCOL_STATE_UNCOMPATIBLE,           ///< cf. 3GPP 24.008 Annex I2
    DISC_UNKNOWN_INFORMATION_ELEMENT,                       ///< cf. 3GPP 24.008 Annex I2
    DISC_CONDITIONAL_IE_ERROR,                              ///< cf. 3GPP 24.008 Annex I2
    DISC_MESSAGE_AND_STATE_UNCOMPATIBLE,                    ///< cf. 3GPP 24.008 Annex I2
    DISC_PROTOCOL_ERROR_UNSPECIFIED,                        ///< cf. 3GPP 24.008 Annex I2
    DISC_PLATFORM_SPECIFIC,                                 ///< Platform specific code.
    DISC_UNDEFINED                                          ///< Undefined reason.
};

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Data session connection state changes.
 */
//--------------------------------------------------------------------------------------------------
HANDLER SessionStateHandler
(
    Profile  profileRef,         ///< Profile reference
    ConState ConnectionState     ///< Data session connection state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for MT-PDP Data session connection state changes.
 */
//--------------------------------------------------------------------------------------------------
HANDLER MtPdpSessionStateHandler
(
    ConState ConnectionState     ///< MT-PDP Data session connection state.
);

//--------------------------------------------------------------------------------------------------
/**
 *  Handler for asynchronous session start and stop result response
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER SessionHandler
(
    Profile      profileRef IN,  ///< Profile reference
    le_result_t  result     IN   ///< Session start or stop result response
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on data session connection state changes for the given profileRef.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT SessionState
(
    Profile             profileRef,  ///< The profile object of interest
    SessionStateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on data session connection state changes for the given profileRef.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT MtPdpSessionState
(
    SessionStateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * This is the structure with info about a given cellular data profile
 */
//--------------------------------------------------------------------------------------------------
STRUCT ProfileInfo
{
    string name[PROFILE_LIST_ENTRY_NAMELEN_MAX];
    uint8 index;
    uint8 type;
};

//--------------------------------------------------------------------------------------------------
/**
 * Get Profile Reference for index
 *
 * @note Create a new profile if the profile's index can't be found.
 *
 * @warning 0 is not a valid index.
 *
 * @warning Ensure to check the list of supported data profiles for your specific platform.
 *
 * @return
 *      - Reference to the data profile
 *      - NULL if the profile index does not exist
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Profile GetProfile
(
    uint32 index ///< index of the profile.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the index for the given Profile.
 *
 * @return
 *      - index of the profile in the modem
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetProfileIndex
(
    Profile profileRef ///< Query this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Start profile data session.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if input parameter is incorrect
 *      - LE_DUPLICATE if the data session is already connected for the given profile
 *      - LE_TIMEOUT for session start timeout
 *      - LE_FAULT for other failures
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartSession
(
    Profile profileRef  ///< Start data session for this profile object
);


//--------------------------------------------------------------------------------------------------
/**
 * Start profile data session.
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION StartSessionAsync
(
    Profile profileRef,     ///< Start data session for this profile object
    SessionHandler handler  ///< Handler for start data session result
);


//--------------------------------------------------------------------------------------------------
/**
 * Stop profile data session.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if the input parameter is not valid
 *      - LE_FAULT for other failures
 *
 * @note
 *      The process exits, if an invalid profile object is given
 *
 * @warning The MT-PDP context activation feature is not supported on all platforms. Please refer to
 * @ref MT-PDP_context section for full details.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StopSession
(
    Profile profileRef ///< Stop data session for this profile object
);


//--------------------------------------------------------------------------------------------------
/**
 * Stop profile data session.
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION StopSessionAsync
(
    Profile profileRef,      ///< Stop data session for this profile object
    SessionHandler handler   ///< Handler for stop data session result
);


//--------------------------------------------------------------------------------------------------
/**
 * Reject MT-PDP profile data session.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if the input parameter is not valid
 *      - LE_UNSUPPORTED if not supported by the target
 *      - LE_FAULT for other failures
 *
 * @note
 *      The process exits, if an invalid profile object is given
 *
 * @warning The MT-PDP context activation feature is not supported on all platforms. Please refer to
 * @ref MT-PDP_context section for full details.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RejectMtPdpSession
(
    Profile profileRef ///< Reject MT-PDP data session for this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the current data session state.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_FAULT on failure
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSessionState
(
    Profile    profileRef,         ///< Query this profile object
    ConState   connectionState OUT ///< The data session state
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the network interface name, if the data session is connected.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the interface name would not fit in interfaceNameStr
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetInterfaceName
(
    Profile profileRef,                                 ///< Query this profile object
    string  interfaceName[INTERFACE_NAME_MAX_LEN] OUT   ///< The name of the network interface
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the IPv4 address for the given profile, if the data session is connected and has an IPv4
 * address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address would not fit in ipAddrStr
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv4Address
(
    Profile profileRef,                     ///< Query this profile object
    string  ipAddr[IPV4_ADDR_MAX_LEN] OUT   ///< The IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the gateway IPv4 address for the given profile, if the data session is connected and has an
 * IPv4 address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address would not fit in gatewayAddrStr
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv4GatewayAddress
(
    Profile profileRef,                         ///< Query this profile object
    string  gatewayAddr[IPV4_ADDR_MAX_LEN] OUT  ///< The gateway IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the primary/secondary DNS v4 addresses for the given profile, if the data session is
 * connected and has an IPv4 address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note
 *      - If only one DNS address is available, then it will be returned, and an empty string will
 *        be returned for the unavailable address
 *      - The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv4DNSAddresses
(
    Profile profileRef,                         ///< Query this profile object
    string  dns1AddrStr[IPV4_ADDR_MAX_LEN] OUT, ///< The primary DNS IP address in dotted format
    string  dns2AddrStr[IPV4_ADDR_MAX_LEN] OUT  ///< The secondary DNS IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the IPv6 address for the given profile, if the data session is connected and has an IPv6
 * address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address would not fit in ipAddrStr
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv6Address
(
    Profile profileRef,                     ///< Query this profile object
    string  ipAddr[IPV6_ADDR_MAX_LEN] OUT   ///< The IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the gateway IPv6 address for the given profile, if the data session is connected and has an
 * IPv6 address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address would not fit in gatewayAddrStr
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv6GatewayAddress
(
    Profile profileRef,                         ///< Query this profile object
    string  gatewayAddr[IPV6_ADDR_MAX_LEN] OUT  ///< The gateway IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the primary/secondary DNS v6 addresses, if the data session is connected and has an IPv6
 * address.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the IP address can't fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note
 *      - If only one DNS address is available, it will be returned, and an empty string will
 *        be returned for the unavailable address.
 *      - The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIPv6DNSAddresses
(
    Profile profileRef,                         ///< Query this profile object
    string  dns1AddrStr[IPV6_ADDR_MAX_LEN] OUT, ///< The primary DNS IP address in dotted format
    string  dns2AddrStr[IPV6_ADDR_MAX_LEN] OUT  ///< The secondary DNS IP address in dotted format
);

//--------------------------------------------------------------------------------------------------
/**
 * Allow the caller to know if the given profile is actually supporting IPv4, if the data session
 * is connected.
 *
 * @return TRUE if PDP type is IPv4, FALSE otherwise.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsIPv4
(
    Profile profileRef     ///< Query this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Allow the caller to know if the given profile is actually supporting IPv6, if the data session
 * is connected.
 *
 * @return TRUE if PDP type is IPv6, FALSE otherwise.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsIPv6
(
    Profile profileRef     ///< Query this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Data Bearer Technology for the given profile, if the data session is connected.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetDataBearerTechnology
(
    Profile              profileRef,                    ///< Query this profile object
    DataBearerTechnology downlinkDataBearerTechPtr OUT, ///< downlink data bearer technology
    DataBearerTechnology uplinkDataBearerTechPtr OUT    ///< uplink data bearer technology
);

//--------------------------------------------------------------------------------------------------
/**
 * Get number of bytes received/transmitted without error since the last reset.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT for all other errors
 *
 * @note
 *      - The process exits, if an invalid pointer is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBytesCounters
(
    uint64 rxBytes OUT,     ///< bytes amount received since the last counter reset
    uint64 txBytes OUT      ///< bytes amount transmitted since the last counter reset
);

//--------------------------------------------------------------------------------------------------
/**
 * Reset received/transmitted data flow statistics
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT for all other errors
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t ResetBytesCounter
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Stop collecting received/transmitted data flow statistics
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT for all other errors
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StopBytesCounter
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Start collecting received/transmitted data flow statistics
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT for all other errors
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t StartBytesCounter
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Packet Data Protocol (PDP) for the given profile.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if the PDP is not supported
 *      - LE_FAULT if the data session is currently connected for the given profile
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetPDP
(
    Profile      profileRef,    ///< Query this profile object
    Pdp          pdp            ///< The Packet Data Protocol
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Packet Data Protocol (PDP) for the given profile.
 *
 * @return
 *      - packet data protocol value
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Pdp GetPDP
(
    Profile profileRef     ///< Query this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Access Point Name (APN) for the given profile.
 *
 * The APN must be an ASCII string.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_FAULT if the data session is currently connected for the given profile
 *
 * @note If APN is too long (max APN_NAME_MAX_LEN digits), it is a fatal error, the
 *       function will not return.
 *
 * @warning The maximum APN length might be limited by the platform.
 *          Please refer to the platform documentation @ref platformConstraintsMdc.
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAPN
(
    Profile profileRef,                 ///< Query this profile object
    string  apnStr[APN_NAME_MAX_LEN] IN ///< The Access Point Name
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Access Point Name (APN) for the given profile according to the SIM identification
 * number (ICCID). If no APN is found using the ICCID, fall back on the home network (MCC/MNC)
 * to determine the default APN.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_FAULT for all other errors
 *
 * @note
 *      The process exits if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetDefaultAPN
(
    Profile profileRef                ///< Query this profile object
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Access Point Name (APN) for the given profile.
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_OVERFLOW if the APN is is too long
 *      - LE_FAULT on failed
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAPN
(
    Profile profileRef,                     ///< Query this profile object
    string  apnStr[APN_NAME_MAX_LEN] OUT    ///< The Access Point Name
);

//--------------------------------------------------------------------------------------------------
/**
 * Set authentication property
 *
 * @return
 *      - LE_OK on success
 *
 * @note
 *      - The process exits, if userName or password are NULL when type is not PA_MDC_AUTH_NONE
 *      - The process exits, if an invalid profile object is given
 * @note If userName is too long (max USER_NAME_MAX_LEN digits), it is a fatal error, the
 *       function will not return.
 * @note If password is too long (max PASSWORD_NAME_MAX_LEN digits), it is a fatal error, the
 *       function will not return.
 * @note Both PAP and CHAP authentication can be set for 3GPP network: in this case, the device
 *       decides which authentication procedure is performed. For example, the device can have a
 *       policy to select the most secure authentication mechanism.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAuthentication
(
    Profile       profileRef,                           ///< Query this profile object
    Auth          type,                                 ///< Authentication type
    string        userName[USER_NAME_MAX_LEN] IN,       ///< UserName used by authentication
    string        password[PASSWORD_NAME_MAX_LEN] IN    ///< Password used by authentication
);

//--------------------------------------------------------------------------------------------------
/**
 * Get authentication property
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_OVERFLOW userName or password are too small
 *      - LE_FAULT on failed
 *
 * @note
 *      The process exits, if an invalid profile object is given
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetAuthentication
(
    Profile       profileRef,                           ///< Query this profile object
    Auth          type OUT,                             ///< Authentication type
    string        userName[USER_NAME_MAX_LEN] OUT,      ///< UserName used by authentication
    string        password[PASSWORD_NAME_MAX_LEN] OUT   ///< Password used by authentication
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the number of profiles on the modem.
 *
 * @return
 *      - number of profiles existing on modem
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 NumProfiles
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get a profile selected by its APN
 *
 * @return
 *      - LE_OK on success
 *      - LE_BAD_PARAMETER if an input parameter is not valid
 *      - LE_NOT_FOUND if the requested APN is not found
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetProfileFromApn
(
    string  apnStr[APN_NAME_MAX_LEN] IN,    ///< The Access Point Name
    Profile profileRef  OUT                 ///< profile reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the disconnection reason.
 *
 * @return The disconnection reason.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @deprecated This function is deprecated, le_mdc_GetDisconnectionReasonExt should be used for the
 *             new code.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DisconnectionReason GetDisconnectionReason
(
    Profile profileRef  IN                 ///< profile reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the platform specific disconnection code.
 *
 * Refer to @ref platformConstraintsSpecificErrorCodes for platform specific
 * disconnection code description.
 *
 * @return The platform specific disconnection code.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @deprecated This function is deprecated, le_mdc_GetPlatformSpecificDisconnectionCodeExt should
 *             be used for the new code.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetPlatformSpecificDisconnectionCode
(
    Profile profileRef  IN                 ///< profile reference
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the platform specific connection failure reason.
 *
 * Refer to @ref platformConstraintsSpecificErrorCodes for platform specific
 * connection failure types and code descriptions.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 *
 * @deprecated This function is deprecated, le_mdc_GetPlatformSpecificFailureConnectionReasonExt
 *             should be used for new code.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION GetPlatformSpecificFailureConnectionReason
(
    Profile profileRef  IN,      ///< profile reference
    int32   failureType OUT,     ///< platform specific failure type
    int32   failureCode OUT      ///< platform specific failure code
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the disconnection reason.
 *
 * @return The disconnection reason.
 *
 * @warning The return value le_mdc_DisconnectionReason_t might be limited by the platform.
 *          Please refer to the platform documentation @ref platformConstraintsMdc.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 * @note For IPv4v6 mode, pdpType specifies which session's disconnect reason to get(IPv4 or IPv6
 *       session). For IPv4 and IPv6 mode, pdpType is ignored because there is only one session for
 *       IPv4 and IPv6 mode.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DisconnectionReason GetDisconnectionReasonExt
(
    Profile profileRef  IN,                 ///< profile reference
    Pdp     pdpType     IN                  ///< pdp type of session
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the platform specific disconnection code.
 *
 * Refer to @ref platformConstraintsSpecificErrorCodes for platform specific
 * disconnection code description.
 *
 * @return The platform specific disconnection code.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 * @note For IPv4v6 mode, pdpType specifies which session's disconnect reason to get(IPv4 or IPv6
 *       session). For IPv4 and IPv6 mode, pdpType is ignored because there is only one session for
 *       IPv4 and IPv6 mode.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetPlatformSpecificDisconnectionCodeExt
(
    Profile profileRef  IN,                 ///< profile reference
    Pdp     pdpType     IN                  ///< pdp type of session
);

//--------------------------------------------------------------------------------------------------
/**
 * Called to get the platform specific connection failure reason.
 *
 * Refer to @ref platformConstraintsSpecificErrorCodes for platform specific connection failure
 * types and code descriptions.
 *
 * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 * @note For IPv4v6 mode, pdpType specifies which session's disconnect reason to get(IPv4 or IPv6
 *       session). For IPv4 and IPv6 mode, pdpType is ignored because there is only one session for
 *       IPv4 and IPv6 mode.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION GetPlatformSpecificFailureConnectionReasonExt
(
    Profile profileRef  IN,      ///< profile reference
    Pdp     pdpType     IN,      ///< pdp type of session
    int32   failureType OUT,     ///< platform specific failure type
    int32   failureCode OUT      ///< platform specific failure code
);

//--------------------------------------------------------------------------------------------------
/**
 * Map a profile on a network interface
 *
 * * @return
 *      - LE_OK on success
 *      - LE_UNSUPPORTED if not supported by the target
 *      - LE_FAULT for all other errors
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t MapProfileOnNetworkInterface
(
    Profile profileRef                             IN,  ///< Profile reference
    string  interfaceName[INTERFACE_NAME_MAX_LEN]  IN   ///< Network interface name
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the list of available profiles
 *
 * @return
 *      - list of available profiles
 *      - LE_OK if the retrieval is successful; otherwise, some error code
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetProfileList
(
    ProfileInfo profileList[PROFILE_LIST_ENTRY_MAX]  OUT ///< list of available profiles
);
