//--------------------------------------------------------------------------------------------------
/**
 * @page c_antenna Antenna Monitoring
 *
 * @ref le_antenna_interface.h "API Reference"
 *
 * <HR>
 *
 * This file contains reference definitions for the antenna diagnostic APIs.
 *
 * @section le_antenna_binding IPC interfaces binding
 *
 * All functions of this API are provided by the @b modemService.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_antenna -> modemService.le_antenna
   }
   @endverbatim
 *
 * @section le_antenna_cell_antenna Cellular or Diversity antenna
 *
 * @subsection le_antenna_cell_antenna_diag Diagnostics principle
 *
 * Diagnostic functionality detects antenna presence and/or defective
 * antennas.
 *
 * Antenna diagnostics are based on the following principles:
 *
 * A small DC current passes through the coaxial cable to the antenna. A resistive bridge is
 * used to provide different voltage depending on the antenna state.
 *
 * @note Only antennas with a resistor between the radiating element and ground are supported.
 *
 * These are the diagnostic states:
 * - open circuit: there's no antenna but RF open circuit
 * - closed circuit: antenna is present
 * - short circuit: with or without antenna, short circuit for RF path.
 *
 * @subsection le_antenna_cell_thres_subsection Thresholds
 *
 * Configurable thresholds are compared to the ADC (Analog to Digital Converter) reading from the
 * antenna diagnostic voltage to determine the antenna state.
 *
 * Short and Open threshold limits determine the antenna's state:
 *
 * <b>Short Threshold Limit</b>
 * - short circuit: unknown state
 * - close circuit: presence of antenna
 *
 * A short event is reported for the Cellular or Diversity antenna if the ADC value is lower than
 * the corresponding short limit.

 * <b>Open Threshold Limit</b>
 * - open circuit: no antenna
 *
 * An open event is reported for the Cellular or Diversity antenna
 * if the ADC value is higher than the corresponding open limit.
 *
 * @note The open threshold is always HIGHER than the short threshold.
 *
 * @section le_antenna_gnss GNSS antenna
 *
 * @warning Be sure check the supported antenna diagnostic limit for your specific platform.
 *
 * @subpage platformConstraintsAntenna Platform Constraints
 *
 * @subsection le_antenna_gnss_diag Diagnostics principle
 *
 * This functionality detects (or not) the presence of an antenna or a defective
 * antenna.
 *
 * Antenna diagnostics measure the current consumption for a GNSS active
 * antenna, and provides current protection circuitry to protect the active
 * antenna's power supply.
 *
 * These are the diagnostic states:
 * - short circuit: with or without antenna, short circuit for RF path.
 * - open circuit: there is no antenna.
 * - closed circuit: presence of antenna.
 * - over current : with or without antenna, short circuit for RF path and current
 * hardware protection circuitry has tripped.
 *
 * @subsection le_antenna_gnss_thresh Thresholds
 *
 * GNSS configurable thresholds are compared to the ADC reading from the
 * antenna diagnostic hardware design to measure the current to determine the antenna state.
 *
 * These are the status values reported for a GNSS antenna:
 * - SHORT_CIRCUIT: ADC value > short limit, but over current HW not tripped.
 * - CLOSE_CIRCUIT: short limit >= ADC value >= open limit.
 * - OPEN_CIRCUIT: ADC value < open limit.
 * - OVER_CURRENT: antenna is shorted and current HW protection circuitry has tripped.
 *
 * @note The open threshold is always LOWER than the short threshold.
 *
 * @section le_antenna_gnss_diag_adc_selection Antenna diagnostic ADC selection
 *
 * @warning Ensure to check the supported antenna diagnosis for your specific platform.
 *
 * By default, antenna diagnostics use an internal ADC to read the voltage from the
 * integrated antenna diagnostic circuit, if any.
 *
 * An antenna design using an external antenna diagnostic circuit can still take
 * advantage of the antenna monitoring service. Using the function le_antenna_SetExternalAdc(),
 * the module can monitor one of the external ADCâ€™s to read the voltage from an
 * external antenna diagnosis circuit, rather than the internal ADC.
 * le_antenna_GetExternalAdc() function reads the external ADC used to monitor
 * the requested antenna.
 *
 * @section API_desc API description
 *
 * le_antenna_Request() API allows the application to monitor the requested antenna.
 *
 * le_antenna_GetType() API retrieves the antenna type from an antenna reference.
 *
 * le_antenna_SetShortLimit() API sets the ADC value used to detect a short circuit.
 *
 * le_antenna_GetShortLimit() API gets the ADC value used to detect a short circuit.
 *
 * le_antenna_SetOpenLimit() API sets the ADC value used to detect an open circuit.
 *
 * le_antenna_GetOpenLimit() API gets the ADC value used to detect an open circuit.
 *
 * le_antenna_AddStatusEventHandler() API adds a handler to be notified when the requested antenna
 * status changed.
 *
 * le_antenna_RemoveStatusEventHandler() removes the antenna status handler.
 *
 * le_antenna_GetStatus() API gets the current antenna status.
 *
 * le_antenna_SetExternalAdc() API sets the external ADC used to monitor the requested antenna.
 *
 * le_antenna_GetExternalAdc() API gets the external ADC used to monitor the requested antenna.
 *
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_antenna_interface.h
 *
 * Legato @ref c_antenna include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for an antenna diagnostic.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Obj;

//--------------------------------------------------------------------------------------------------
/**
 * Antenna type.
 */
//--------------------------------------------------------------------------------------------------
ENUM Type
{
    PRIMARY_CELLULAR,     ///< Cellular antenna type
    DIVERSITY_CELLULAR,   ///< Diversity antenna type
    GNSS,                 ///< GNSS positioning antenna type
    MAX
};

//--------------------------------------------------------------------------------------------------
/**
 * Antenna status
 */
//--------------------------------------------------------------------------------------------------
ENUM Status
{
    SHORT_CIRCUIT,     ///< antenna in short circuit: unknown state.
    CLOSE_CIRCUIT,     ///< antenna in closed circuit: presence of antenna.
    OPEN_CIRCUIT,      ///< antenna in open circuit: there is no antenna.
    OVER_CURRENT,      ///< antenna in short circuit and current HW protection circuitry has
                       ///< tripped. Only applicable for GNSS antenna.
    INACTIVE,          ///< Antenna diagnosis feature is inactive.
    LAST_STATUS        ///< last status value.
};

//--------------------------------------------------------------------------------------------------
/**
 * Requested the antenna monitoring.
 *
 * @return
 *      - Reference to the antenna object.
 *      - NULL on failure.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Obj Request
(
    Type antennaType  IN  ///< antenna to be monitored
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the antenna type.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_BAD_PARAMETER if an invalid reference provided.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetType
(
    Obj     antennaRef   IN,        ///< antenna reference
    Type    antennaType  OUT        ///< allocated antenna type
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the ADC value used to detect a short circuit.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_FAULT on other failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetShortLimit
(
    Obj         antennaRef  IN,     ///< antenna reference
    uint32      shortLimit  IN      ///< ADC value used to detect a short circuit
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the ADC value used to detect a short circuit.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_FAULT on other failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetShortLimit
(
    Obj         antennaRef  IN,    ///< antenna reference
    uint32      shortLimit  OUT    ///< ADC value used to detect a short circuit
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the ADC value used to detect an open circuit.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_FAULT on other failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetOpenLimit
(
    Obj         antennaRef  IN,      ///< antenna reference
    uint32      openLimit   IN       ///< ADC value used to detect an open circuit
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the ADC value used to detect an open circuit.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_FAULT on other failure
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetOpenLimit
(
    Obj         antennaRef  IN,      ///< antenna reference
    uint32      openLimit   OUT    ///< ADC value used to detect an open circuit
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for antenna status.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER StatusHandler
(
    Obj                 antennaRef  IN,      ///< antenna reference
    Status              status  IN       ///< antenna status
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on antenna status for the given antennaRef.
 *
 */
//--------------------------------------------------------------------------------------------------
EVENT StatusEvent
(
    Obj           antennaRef     IN,              ///< antenna reference
    StatusHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the antenna status.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_UNSUPPORTED if the antenna detection is not supported
 *      - LE_FAULT on other failure
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetStatus
(
    Obj           antennaRef  IN,        ///< antenna reference
    Status        status      OUT        ///< antenna status
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the external ADC used to monitor the requested antenna.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_UNSUPPORTED request not supported
 *      - LE_FAULT on other failure
 *
 * @note The same external ADC may not be selected for both antennas at the same time.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetExternalAdc
(
    Obj           antennaRef  IN,      ///< antenna reference
    int8          adcId       IN       ///< ADC index used to monitor the requested antenna
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the external ADC used to monitor the requested antenna.
 *
 * @return
 *      - LE_OK on success
 *      - LE_NOT_FOUND if the antenna reference is unknown
 *      - LE_UNSUPPORTED request not supported
 *      - LE_FAULT on other failure
 *
 * @note If the returned ADC index is "-1", it means no external ADC are used to monitor
 * the requested antenna.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetExternalAdc
(
    Obj           antennaRef  IN,      ///< antenna reference
    int8          adcId       OUT      ///< ADC index used to monitor the requested antenna
);
