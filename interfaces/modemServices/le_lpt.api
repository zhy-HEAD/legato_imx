//--------------------------------------------------------------------------------------------------
/**
 * @page c_lpt Low Power Technologies
 *
 * @ref le_lpt_interface.h "API Reference"
 *
 * <HR>
 *
 * The Low Power Technologies (LPT) APIs are used to control the low power features of the modem.
 *
 * @section le_lpt_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b modemService service.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_lpt -> modemService.le_lpt
   }
   @endverbatim
 *
 * @section le_lpt_eDRX eDRX
 *
 * The extended idle-mode discontinuous reception (eDRX) is a mechanism that reduces power
 * consumption by extending the sleeping cycle in idle mode. It allows the device to turn part of
 * its circuitry off during the extended DRX period to save power. During the extended DRX period,
 * the device is not listening for paging or downlink control channels, so the network should not
 * try to contact the device.
 *
 * @warning Enabling eDRX introduces a longer latency in reaching the device and should therefore
 * not be used by systems that cannot handle it, e.g. systems supporting mobile-terminated voice.
 *
 * The use of eDRX for a given radio access technology (@ref le_lpt_EDrxRat_t) can be enabled and
 * disabled with le_lpt_SetEDrxState().
 *
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" Set state
 *
 * The eDRX feature is controlled by two parameters, which are defined in the standard 3GPP
 * TS 24.008 Release 13 Section 10.5.5.32: the eDRX value, defining the eDRX cycle length, and
 * the Paging Time Window. These parameters are negotiated between the device and the network during
 * an attach or routing area updating procedure.
 *
 * The requested eDRX value can be set with le_lpt_SetRequestedEDrxValue() and retrieved with
 * le_lpt_GetRequestedEDrxValue().
 *
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" eDRX value
 *
 * The eDRX value provided by the network can be retrieved with
 * le_lpt_GetNetworkProvidedEDrxValue().
 *
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" NP eDRX value
 *
 * The requested Paging Time Window cannot be set, but the network-provided value can be retrieved
 * with le_lpt_GetNetworkProvidedPagingTimeWindow().
 *
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" NP PTW
 *
 * A handler can also be registered with le_lpt_AddEDrxParamsChangeHandler() in order to be notified
 * of the changes in the network-provided eDRX parameters.
 *
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" eDRX handler
 * @snippet "apps/test/modemServices/lpt/lptIntegrationTest/lptTest/lptTest.c" Add eDRX handler
 *
 * The handler can be removed with le_lpt_RemoveEDrxParamsChangeHandler().
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_lpt_interface.h
 *
 * Legato @ref c_lpt include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * eDRX Radio Access Technology enum
 */
//--------------------------------------------------------------------------------------------------
ENUM EDrxRat
{
    EDRX_RAT_UNKNOWN,       ///< Unknown
    EDRX_RAT_EC_GSM_IOT,    ///< EC-GSM-IoT (A/Gb mode)
    EDRX_RAT_GSM,           ///< GSM (A/Gb mode)
    EDRX_RAT_UTRAN,         ///< UTRAN (Iu mode)
    EDRX_RAT_LTE_M1,        ///< E-UTRAN (WB-S1 mode)
    EDRX_RAT_LTE_NB1,       ///< E-UTRAN (NB-S1 mode)
    EDRX_RAT_MAX            ///< Invalid
};

//--------------------------------------------------------------------------------------------------
/**
 * Set the eDRX activation state for the given Radio Access Technology.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNSUPPORTED    eDRX is not supported by the platform.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetEDrxState
(
    EDrxRat     rat             IN, ///< Radio Access Technology.
    le_onoff_t  activation      IN  ///< eDRX activation state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the requested eDRX cycle value for the given Radio Access Technology.
 * The eDRX cycle value is defined in 3GPP TS 24.008 Release 13 section 10.5.5.32.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNSUPPORTED    eDRX is not supported by the platform.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRequestedEDrxValue
(
    EDrxRat     rat             IN, ///< Radio Access Technology.
    uint8       eDrxValue       IN  ///< Requested eDRX cycle value, defined in 3GPP
                                    ///< TS 24.008 Rel-13 section 10.5.5.32.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the requested eDRX cycle value for the given Radio Access Technology.
 * The eDRX cycle value is defined in 3GPP TS 24.008 Release 13 section 10.5.5.32.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNSUPPORTED    eDRX is not supported by the platform.
 *  - LE_UNAVAILABLE    No requested eDRX cycle value.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRequestedEDrxValue
(
    EDrxRat     rat             IN, ///< Radio Access Technology.
    uint8       eDrxValue       OUT ///< Requested eDRX cycle value, defined in 3GPP
                                    ///< TS 24.008 Rel-13 section 10.5.5.32.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the network-provided eDRX cycle value for the given Radio Access Technology.
 * The eDRX cycle value is defined in 3GPP TS 24.008 Release 13 section 10.5.5.32.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNSUPPORTED    eDRX is not supported by the platform.
 *  - LE_UNAVAILABLE    No network-provided eDRX cycle value.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNetworkProvidedEDrxValue
(
    EDrxRat     rat             IN, ///< Radio Access Technology.
    uint8       eDrxValue       OUT ///< Network-provided eDRX cycle value, defined in
                                    ///< 3GPP TS 24.008 Rel-13 section 10.5.5.32.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the network-provided Paging Time Window for the given Radio Access Technology.
 * The Paging Time Window is defined in 3GPP TS 24.008 Release 13 section 10.5.5.32.
 *
 * @return
 *  - LE_OK             The function succeeded.
 *  - LE_BAD_PARAMETER  A parameter is invalid.
 *  - LE_UNSUPPORTED    eDRX is not supported by the platform.
 *  - LE_UNAVAILABLE    No defined Paging Time Window.
 *  - LE_FAULT          The function failed.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNetworkProvidedPagingTimeWindow
(
    EDrxRat     rat                 IN, ///< Radio Access Technology.
    uint8       pagingTimeWindow    OUT ///< Network-provided Paging Time Window, defined
                                        ///< in 3GPP TS 24.008 Rel-13 section 10.5.5.32.
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler to report a change in the network-provided eDRX parameters.
 */
//--------------------------------------------------------------------------------------------------
HANDLER EDrxParamsChangeHandler
(
    EDrxRat     rat                 IN, ///< Radio Access Technology.
    le_onoff_t  activation          IN, ///< eDRX activation state.
    uint8       eDrxValue           IN, ///< eDRX cycle value, defined in 3GPP
                                        ///< TS 24.008 Rel-13 section 10.5.5.32.
    uint8       pagingTimeWindow    IN  ///< Paging Time Window, defined in 3GPP
                                        ///< TS 24.008 Rel-13 section 10.5.5.32.
);

//--------------------------------------------------------------------------------------------------
/**
 * Event to report a change in the network-provided eDRX parameters.
 */
//--------------------------------------------------------------------------------------------------
EVENT EDrxParamsChange
(
    EDrxParamsChangeHandler handler
);
