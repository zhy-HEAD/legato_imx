//--------------------------------------------------------------------------------------------------
/**
 * @page c_appInfo Application Information API
 *
 * @ref le_appInfo_interface.h "API Reference"
 *
 * This API provides information about applications.
 *
 * All the functions in this API are provided by the @b Supervisor.
 *
 * Here's a code sample binding to this service:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_appInfo -> <root>.le_appInfo
   }
   @endverbatim
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * @file le_appInfo_interface.h
 *
 * Legato @ref c_appInfo include file.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


USETYPES le_limit.api;


//--------------------------------------------------------------------------------------------------
/**
 * Application states.
 */
//--------------------------------------------------------------------------------------------------
ENUM State
{
    STOPPED,            ///< Application has been stopped or never started.
    RUNNING             ///< Application is running.
};


//--------------------------------------------------------------------------------------------------
/**
 * Process states.
 */
//--------------------------------------------------------------------------------------------------
ENUM ProcState
{
    PROC_STOPPED,       ///< Process has been stopped or never started.
    PROC_RUNNING        ///< Process is running.
};


//--------------------------------------------------------------------------------------------------
/**
 * Length of an MD5 hash string.
 */
//--------------------------------------------------------------------------------------------------
DEFINE MD5_STR_LEN = 32;


//--------------------------------------------------------------------------------------------------
/**
 * Gets the state of the specified application.  The state of unknown applications is STOPPED.
 *
 * @return
 *      The state of the specified application.
 *
 * @note If the application name pointer is null or if its string is empty or of bad format it is a
 *       fatal error, the function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION State GetState
(
    string appName[le_limit.APP_NAME_LEN] IN        ///< Application name.
);


// -------------------------------------------------------------------------------------------------
/**
 * Gets the state of the specified process in an application.  This function only works for
 * configured processes that the Supervisor starts directly.
 *
 * @return
 *      The state of the specified process.
 *
 * @note If the application or process names pointers are null or if their strings are empty or of
 *       bad format it is a fatal error, the function will not return.
 */
// -------------------------------------------------------------------------------------------------
FUNCTION ProcState GetProcState
(
    string appName[le_limit.APP_NAME_LEN] IN,       ///< Application name.
    string procName[le_limit.PROC_NAME_LEN] IN      ///< Process name.
);


//-------------------------------------------------------------------------------------------------
/**
 * Gets the application name of the process with the specified PID.
 *
 * @return
 *      LE_OK if the application name was successfully found.
 *      LE_OVERFLOW if the application name could not fit in the provided buffer.
 *      LE_NOT_FOUND if the process is not part of an application.
 *      LE_FAULT if there was an error.
 */
//-------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetName
(
    int32 pid IN,                               ///< PID of the process.
    string appName[le_limit.APP_NAME_LEN] OUT   ///< Application name.
);


//-------------------------------------------------------------------------------------------------
/**
 * Gets the application hash as a hexidecimal string.  The application hash is a unique hash of the
 * current version of the application.
 *
 * @return
 *      LE_OK if the application has was successfully retrieved.
 *      LE_OVERFLOW if the application hash could not fit in the provided buffer.
 *      LE_NOT_FOUND if the application is not installed.
 *      LE_FAULT if there was an error.
 *
 * @note If the application name pointer is null or if its string is empty or of bad format it is a
 *       fatal error, the function will not return.
 */
//-------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetHash
(
    string appName[le_limit.APP_NAME_LEN] IN,   ///< Application name.
    string hashStr[MD5_STR_LEN] OUT             ///< Hash string.
);
